{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "ecanalyticsdfprd"
		},
		"AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'accountKey' de 'AzureDataLakeStorage'"
		},
		"Conexao_KCOR_E050ECER_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_E050ECER'"
		},
		"Conexao_KCOR_E101_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_E101'"
		},
		"Conexao_KCOR_E135_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_E135'"
		},
		"Conexao_KCOR_EARA_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_EARA'"
		},
		"Conexao_KCOR_ENOR_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_ENOR'"
		},
		"Conexao_KCOR_EPST_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_EPST'"
		},
		"Conexao_KCOR_ERMIN_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_ERMIN'"
		},
		"Conexao_KCOR_ESUL_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_ESUL'"
		},
		"Conexao_KCOR_EVIS_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_EVIS'"
		},
		"Conexao_KCOR_PONT_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_KCOR_PONT'"
		},
		"Conexao_SGR_CATARATA_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_CATARATA'"
		},
		"Conexao_SGR_E101_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_E101'"
		},
		"Conexao_SGR_E135_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_E135'"
		},
		"Conexao_SGR_ECOPARA_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_ECOPARA'"
		},
		"Conexao_SGR_ECOSUL_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_ECOSUL'"
		},
		"Conexao_SGR_EPST_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_EPST'"
		},
		"Conexao_SGR_PONT_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_SGR_PONT'"
		},
		"Conexao_TOLLN3_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_TOLLN3'"
		},
		"Conexao_TOLLPACKBI_2_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'Conexao_TOLLPACKBI_2'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'SqlServer1'"
		},
		"SqlServer_ECompras_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'SqlServer_ECompras'"
		},
		"dbrk_eco_ls_accessToken": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'accessToken' de 'dbrk_eco_ls'"
		},
		"oracle_sap_ecc_ls_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'oracle_sap_ecc_ls'"
		},
		"rest_hana_password": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'password' de 'rest_hana'"
		},
		"rest_sap_pwbi_password": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'password' de 'rest_sap_pwbi'"
		},
		"rest_sap_sf_password": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'password' de 'rest_sap_sf'"
		},
		"sql_server_sistema_juridico_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'sql_server_sistema_juridico'"
		},
		"AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ecsanalyticsdl.dfs.core.windows.net/"
		},
		"SharepointGrupoecorodovias_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://grupoecorodovias.sharepoint.com/sites"
		},
		"dbrk_eco_ls_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0914-142952-uki2j8p5"
		},
		"rest_hana_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ecorodovias-dev-s6jfmx6y.it-cpi008-rt.cfapps.br10.hana.ondemand.com/http/"
		},
		"rest_hana_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sb-125c8253-122d-4942-9d24-cdfc83998aba!b2219|it-rt-ecorodovias-dev-s6jfmx6y!b106"
		},
		"rest_sap_pwbi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ecorodovias-dev-s6jfmx6y.it-cpi008-rt.cfapps.br10.hana.ondemand.com/http/"
		},
		"rest_sap_pwbi_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sb-125c8253-122d-4942-9d24-cdfc83998aba!b2219|it-rt-ecorodovias-dev-s6jfmx6y!b106"
		},
		"rest_sap_sf_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api8.successfactors.com/odata/v2/"
		},
		"rest_sap_sf_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "powerBI_integracao@ecorodoviaD"
		},
		"trg_ingest_prata_ecompras_properties_ingest_prata_ecompras_parameters_tipo_carga": {
			"type": "string",
			"defaultValue": "delta"
		},
		"trg_ingest_prata_juridico_properties_ingest_prata_juridico_parameters_tipo_carga": {
			"type": "string",
			"defaultValue": "delta"
		},
		"trg_ingest_prata_sap_ecc_properties_ingest_prata_sap_ecc_parameters_tipo_carga": {
			"type": "string",
			"defaultValue": "delta"
		},
		"Runtime-sgp_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/b5a9d3e3-9203-4a37-b799-586a326cdbf9/resourcegroups/RG-Analytics-BD/providers/Microsoft.DataFactory/factories/ecanalyticsdfdev/integrationruntimes/Runtime-sgp"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_FLAT_FILE_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL flat file do KCOR",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "Executar_ingest_e050ecer",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e050ecer_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e050ecer_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e050ecer_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_epst",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_epst_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_epst_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_epst_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_pont",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_pont_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_pont_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_pont_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_e135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e135_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e135_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e135_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_evis",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_evis_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_evis_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_evis_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "Executar_ingest_esul",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_esul_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_esul_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_esul_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_e101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e101_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e101_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e101_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "Executar_ingest_eara",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_eara_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_eara_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_eara_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "Executar_ingest_ermin",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_ermin_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_ermin_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_ermin_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "Executar_ingest_enor",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_enor_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_enor_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_enor_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"origem": {
						"type": "string"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e050ecer_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_e050ecer_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_e050ecer_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_epst_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_epst_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_epst_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_pont_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_pont_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_pont_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e135_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_e135_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_e135_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_evis_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_evis_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_evis_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_esul_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_esul_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_esul_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e101_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_e101_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_e101_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_eara_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_eara_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_eara_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_ermin_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_ermin_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_ermin_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_enor_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_enor_flat_file')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_enor_flat_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_FLAT_FILE_REPORT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_kcor_vw_causa_provavel",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_CAUSA_PROVAVEL",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxCausasProvaveis/",
								"input_name": "dbo_TAuxCausasProvaveis",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_CAUSA_PROVAVEL/",
								"output_name": "VW_KCOR_DIM_CAUSA_PROVAVEL",
								"output_options": "{}",
								"output_keys": "CD_CAUSA_PROVAVEL",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_condicao_metereologica",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_causa_provavel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_CONDICAO_METEOROLOGICA",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxCondicoesMeteorologicas/",
								"input_name": "dbo_TAuxCondicoesMeteorologicas",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_CONDICAO_METEOROLOGICA/",
								"output_name": "VW_KCOR_DIM_CONDICAO_METEOROLOGICA",
								"output_options": "{}",
								"output_keys": "CD_CONDICAO_METEOROLOGICA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_tipo_atendimento",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_condicao_metereologica",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_TIPO_ATENDIMENTO",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxTiposAtendimentos/",
								"input_name": "dbo_TAuxTiposAtendimentos",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_TIPO_ATENDIMENTO/",
								"output_name": "VW_KCOR_DIM_TIPO_ATENDIMENTO",
								"output_options": "{}",
								"output_keys": "CD_TIPO_ATENDIMENTO,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_tipo_acidente",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_tipo_atendimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_TIPOACIDENTES",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxTiposAcidentes/",
								"input_name": "dbo_TAuxTiposAcidentes",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_TIPOACIDENTES/",
								"output_name": "VW_KCOR_DIM_TIPOACIDENTES",
								"output_options": "{}",
								"output_keys": "CodTipoAcidente,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_tipo_ocorrencia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_tipo_acidente",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_TIPOOCORRENCIAS",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxTiposOcorrencias/",
								"input_name": "dbo_TAuxTiposOcorrencias",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_TIPOOCORRENCIAS/",
								"output_name": "VW_KCOR_DIM_TIPOOCORRENCIAS",
								"output_options": "{}",
								"output_keys": "TipoOcorrencia,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_tipo_veiculo",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_tipo_ocorrencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_TIPOVEICULO",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxTiposVeiculos/",
								"input_name": "dbo_TAuxTiposVeiculos",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_TIPOVEICULO/",
								"output_name": "VW_KCOR_DIM_TIPOVEICULO",
								"output_options": "{}",
								"output_keys": "CodTipoVeiculo,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_vit_situacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_tipo_veiculo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_VITSITUACAO",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxVitSituacoes/",
								"input_name": "dbo_TAuxVitSituacoes",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_VITSITUACAO/",
								"output_name": "VW_KCOR_DIM_VITSITUACAO",
								"output_options": "{}",
								"output_keys": "CodSituacao,unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL do KCOR paga ingestão incremental dos dados com verificação da pasta bronze ao iniciar a execução da pipeline",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "Executar_ingest_e050ecer",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_epst",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_pont",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_e135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_evis",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "Executar_ingest_esul",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_e101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "Executar_ingest_eara",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "Executar_ingest_ermin",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "Executar_ingest_enor",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool",
						"defaultValue": false
					},
					"origem": {
						"type": "string"
					},
					"dias_atualizacao_etl": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T20:55:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_pont')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_pont')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_pont')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_esul')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_esul')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_esul')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_eara')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_eara')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_eara')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_enor')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_incr_enor')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_incr_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E050ECER_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_E050ECER",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_e050ecer",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_E050ECER_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_E050ECER_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_E050ECER_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E050ECER_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_e050ecer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E101_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_E101",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_e101",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_E101_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_E101_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_E101_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E101_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_E101",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_e101",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E135_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_E135",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_e135",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_E135_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_E135_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_E135_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E135_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_e135",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EARA_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_EARA",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_eara",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_EARA_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_EARA_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_EARA_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EARA_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_eara",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ENOR_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "X",
									"table": "X"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_ENOR",
														"type": "DatasetReference",
														"parameters": {
															"schema": "X",
															"table": "X"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_enor",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_ENOR_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_ENOR_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ENOR')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_ENOR_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ENOR_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_enor",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ENOR')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EPST_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_EPST",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_epst",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_EPST_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_EPST_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_EPST_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EPST_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_epst",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ERMIN_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_ERMIN",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_ermin",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_ERMIN_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_ERMIN_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ERMIN')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_ERMIN_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ERMIN_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_ermin",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ERMIN')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ESUL_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da  Ecosul para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_ESUL",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_esul",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_ESUL_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_ESUL_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ESUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_ESUL_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ESUL_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecosul para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_esul",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ESUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EVIS_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da  Ecovias para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_EVIS",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_evis",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_EVIS_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_EVIS_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EVIS')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_EVIS_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EVIS_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_evis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EVIS')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_PONT_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_PONT",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_pont",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_PONT_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_PONT_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]",
				"[concat(variables('factoryId'), '/pipelines/KCOR_INCR_P1-1_PONT_DIN_AUX')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_PONT_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_pont",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados incrementais on-premises de todas as tabelas do KCOR da EcoPistas para camada bronze",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.Origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "CarregarE050ECER",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "CarregarEPST",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "CarregarPONT",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "CarregarE135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "CarregarEVIS",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "CarregarESUL",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "CarregarE101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "CarregarEARA",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "CarregarERMIN",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "CarregarENOR",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_p1",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"origem": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					},
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"dias": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_pont')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_esul')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_eara')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_incr_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_REPORT_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_kcor_vw_praca_grupo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_DIM_PRACA_GRUPO",
							"baseParameters": {
								"read_mode_praca": "delta",
								"input_path_praca": "/camada_ouro/tolln3/dbo.PRACA/semanal/",
								"input_name_praca": "dbo_praca",
								"input_options_praca": "{}",
								"read_mode_concessao": "delta",
								"input_path_concessao": "/camada_ouro/tolln3/dbo.CONCESSAO/semanal/",
								"input_name_concessao": "dbo_concessao",
								"input_options_concessao": "{}",
								"read_mode_cobertura_praca": "delta",
								"input_path_cobertura_praca": "/camada_ouro/kcor/dbo.AUX_Cobertura_Praca/",
								"input_name_cobertura_praca": "dbo_AUX_Cobertura_Praca",
								"input_options_cobertura_praca": "{}",
								"read_mode_rodovias": "delta",
								"input_path_rodovias": "/camada_ouro/kcor/dbo.TAuxRodovias/",
								"input_name_rodovias": "dbo_TAuxRodovias",
								"input_options_rodovias": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_DIM_PRACA_GRUPO/",
								"output_name": "VW_DIM_PRACA_GRUPO",
								"output_options": "{}",
								"output_keys": "CD_CONCESSAO,CD_PRACA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_dim_osa",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_praca_grupo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_DIM_OSA",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/tolln3/dbo.OSA/semanal/",
								"input_name": "dbo_osa",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_DIM_OSA/",
								"output_name": "VW_DIM_OSA",
								"output_options": "{}",
								"output_keys": "ID_OSA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_concessao_praca_th",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_dim_osa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_DIM_CONCESSAO_PRACA_TH",
							"baseParameters": {
								"read_mode_praca": "delta",
								"input_path_praca": "/camada_ouro/tolln3/dbo.PRACA/semanal/",
								"input_name_praca": "dbo_praca",
								"input_options_praca": "{}",
								"read_mode_concessao": "delta",
								"input_path_concessao": "/camada_ouro/tolln3/dbo.CONCESSAO/semanal/",
								"input_name_concessao": "dbo_convessao",
								"input_options_concessao": "{}",
								"read_mode_cobertura_praca": "delta",
								"input_path_cobertura_praca": "/camada_ouro/kcor/dbo.AUX_Cobertura_Praca/",
								"input_name_cobertura_praca": "dbo_AUX_Cobertura_Praca",
								"input_options_cobertura_praca": "{}",
								"read_mode_rodovias": "delta",
								"input_path_rodovias": "/camada_ouro/kcor/dbo.TAuxRodovias/",
								"input_name_rodovias": "dbo_TAuxRodovias",
								"input_options_rodovias": "{}",
								"read_mode_trecho_homogeneo": "delta",
								"input_path_trecho_homogeneo": "/camada_ouro/kcor/dbo.DW_TRECHO_HOMOGENEO/",
								"input_name_trecho_homogeneo": "dbo_DW_TRECHO_HOMOGENEO",
								"input_options_trecho_homogeneo": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_DIM_CONCESSAO_PRACA_TH/",
								"output_name": "VW_DIM_CONCESSAO_PRACA_TH",
								"output_options": "{}",
								"output_keys": "CD_CONCESSAO,CD_PRACA,ID_TH_GRUPO",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_tipo_recurso",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_concessao_praca_th",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DIM_TIPO_RECURSO",
							"baseParameters": {
								"read_mode_recurso": "delta",
								"input_path_recurso": "/camada_ouro/kcor/dbo.TauxRecursos/",
								"input_name_recurso": "dbo_TauxRecursos",
								"input_options_recurso": "{}",
								"read_mode_tipo_recurso": "delta",
								"input_path_tipo_recurso": "/camada_ouro/kcor/dbo.TAuxTiposRecursos/",
								"input_name_tipo_recurso": "dbo_TAuxTiposRecursos",
								"input_options_tipo_recurso": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DIM_TIPO_RECURSO/",
								"output_name": "VW_KCOR_DIM_TIPO_RECURSO",
								"output_options": "{}",
								"output_keys": "CD_RECURSO,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_drodovias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_tipo_recurso",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DRODOVIAS",
							"baseParameters": {
								"read_mode": "delta",
								"input_path": "/camada_ouro/kcor/dbo.TAuxRodovias/",
								"input_name": "dbo_TAuxRodovias",
								"input_options": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DRODOVIAS/",
								"output_name": "VW_KCOR_DRODOVIAS",
								"output_options": "{}",
								"output_keys": "CD_RODOVIA,CD_CONCESSAO",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_natureza",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_drodovias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_DNATUREZA",
							"baseParameters": {
								"read_mode_tipo_ocorrencia": "delta",
								"input_path_tipo_ocorrencia": "/camada_ouro/kcor/dbo.TAuxTiposOcorrencias/",
								"input_name_tipo_ocorrencia": "dbo_TAuxTiposOcorrencias",
								"input_optio_tipo_ocorrencia": "{}",
								"read_mode_tipo_acidente": "delta",
								"input_path_tipo_acidente": "/camada_ouro/kcor/dbo.TAuxTiposAcidentes/",
								"input_name_tipo_acidente": "dbo_TAuxTiposAcidentes",
								"input_options_tipo_acidente": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_DNATUREZA/",
								"output_name": "VW_KCOR_DNATUREZA",
								"output_options": "{}",
								"output_keys": "CD_NATUREZA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_REPORT_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_kcor_vw_ocorrencia",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_OCORRENCIAS",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabVitimas": "delta",
								"input_path_TabVitimas": "/camada_ouro/kcor/dbo.TabVitimas/",
								"input_name_TabVitimas": "dbo_TabVitimas",
								"input_options_TabVitimas": "{}",
								"read_mode_TabAcidentes": "delta",
								"input_path_TabAcidentes": "/camada_ouro/kcor/dbo.TabAcidentes/",
								"input_name_TabAcidentes": "dbo_TabAcidentes",
								"input_options_TabAcidentes": "{}",
								"read_mode_TAuxTiposOcorrencias": "delta",
								"input_path_TAuxTiposOcorrencias": "/camada_ouro/kcor/dbo.TAuxTiposOcorrencias/",
								"input_name_TAuxTiposOcorrencias": "dbo_TAuxTiposOcorrencias",
								"input_options_TAuxTiposOcorrencias": "{}",
								"read_mode_TAuxOrigemChamado": "delta",
								"input_path_TAuxOrigemChamado": "/camada_ouro/kcor/dbo.TAuxOrigemChamado/",
								"input_name_TAuxOrigemChamado": "dbo_TAuxOrigemChamado",
								"input_options_TAuxOrigemChamado": "{}",
								"read_mode_DW_TRECHO_HOMOGENEO": "delta",
								"input_path_DW_TRECHO_HOMOGENEO": "/camada_ouro/kcor/dbo.DW_TRECHO_HOMOGENEO/",
								"input_name_DW_TRECHO_HOMOGENEO": "dbo_DW_TRECHO_HOMOGENEO",
								"input_options_DW_TRECHO_HOMOGENEO": "{}",
								"read_mode_TAuxSentidos": "delta",
								"input_path_TAuxSentidos": "/camada_ouro/kcor/dbo.TAuxSentidos/",
								"input_name_TAuxSentidos": "dbo_TAuxSentidos",
								"input_options_TAuxSentidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_OCORRENCIAS/",
								"output_name": "VW_KCOR_OCORRENCIAS",
								"output_options": "{}",
								"output_keys": "CD_RECURSO,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_vitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_ocorrencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_FVITIMAS",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_path_TabVeiculosEnvolvidos": "/camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"input_name_TabVeiculosEnvolvidos": "dbo_TabVeiculosEnvolvidos",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"read_mode_TAuxTiposVeiculos": "delta",
								"input_path_TAuxTiposVeiculos": "/camada_ouro/kcor/dbo.TAuxTiposVeiculos/",
								"input_name_TAuxTiposVeiculos": "dbo_TAuxTiposVeiculos",
								"input_options_TAuxTiposVeiculos": "{}",
								"read_mode_TabVitimas": "delta",
								"input_path_TabVitimas": "/camada_ouro/kcor/dbo.TabVitimas/",
								"input_name_TabVitimas": "dbo_TabVitimas",
								"input_options_TabVitimas": "{}",
								"read_mode_TAuxVitPosicoes": "delta",
								"input_path_TAuxVitPosicoes": "/camada_ouro/kcor/dbo.TAuxVitPosicoes/",
								"input_name_TAuxVitPosicoes": "dbo_TAuxVitPosicoes",
								"input_options_TAuxVitPosicoes": "{}",
								"read_mode_TAuxVitSituacoes": "delta",
								"input_path_TAuxVitSituacoes": "/camada_ouro/kcor/dbo.TAuxVitSituacoes/",
								"input_name_TAuxVitSituacoes": "dbo_TAuxVitSituacoes",
								"input_options_TAuxVitSituacoes": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_FVITIMAS/",
								"output_name": "VW_KCOR_FVITIMAS",
								"output_options": "{}",
								"output_keys": "CD_RODOVIA,CD_CONCESSAO",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_veiculos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_vitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_FVEICULOS",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_path_TabVeiculosEnvolvidos": "/camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"input_name_TabVeiculosEnvolvidos": "dbo_TabVeiculosEnvolvidos",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"read_mode_TAuxTiposVeiculos": "delta",
								"input_path_TAuxTiposVeiculos": "/camada_ouro/kcor/dbo.TAuxTiposVeiculos/",
								"input_name_TAuxTiposVeiculos": "dbo_TAuxTiposVeiculos",
								"input_options_TAuxTiposVeiculos": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_FVEICULOS/",
								"output_name": "VW_KCOR_FVEICULOS",
								"output_options": "{}",
								"output_keys": "CD_NATUREZA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_recursos_ocorrencia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_veiculos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_FRECURSOS_OCORRENCIA",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabRecursosAcionados": "delta",
								"input_path_TabRecursosAcionados": "/camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"input_name_TabRecursosAcionados": "dbo_TabRecursosAcionados",
								"input_options_TabRecursosAcionados": "{}",
								"read_mode_TAuxTiposAtendimentos": "delta",
								"input_path_TAuxTiposAtendimentos": "/camada_ouro/kcor/dbo.TAuxTiposAtendimentos/",
								"input_name_TAuxTiposAtendimentos": "dbo_TAuxTiposAtendimentos",
								"input_options_TAuxTiposAtendimentos": "{}",
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_path_TabVeiculosEnvolvidos": "/camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"input_name_TabVeiculosEnvolvidos": "dbo_TabVeiculosEnvolvidos",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"read_mode_TAuxTiposRecursos": "delta",
								"input_path_TAuxTiposRecursos": "/camada_ouro/kcor/dbo.TAuxTiposRecursos/",
								"input_name_TAuxTiposRecursos": "dbo_TAuxTiposRecursos",
								"input_options_TAuxTiposRecursos": "{}",
								"read_mode_TauxRecursos": "delta",
								"input_path_TauxRecursos": "/camada_ouro/kcor/dbo.TauxRecursos/",
								"input_name_TauxRecursos": "dbo_TauxRecursos",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_FRECURSOS_OCORRENCIA/",
								"output_name": "VW_KCOR_FRECURSOS_OCORRENCIA",
								"output_options": "{}",
								"output_keys": "CD_NATUREZA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_REPORT_FT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_kcor_vw_ocorrencia",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_OCORRENCIAS",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabVitimas": "delta",
								"input_path_TabVitimas": "/camada_ouro/kcor/dbo.TabVitimas/",
								"input_name_TabVitimas": "dbo_TabVitimas",
								"input_options_TabVitimas": "{}",
								"read_mode_TabAcidentes": "delta",
								"input_path_TabAcidentes": "/camada_ouro/kcor/dbo.TabAcidentes/",
								"input_name_TabAcidentes": "dbo_TabAcidentes",
								"input_options_TabAcidentes": "{}",
								"read_mode_TAuxTiposOcorrencias": "delta",
								"input_path_TAuxTiposOcorrencias": "/camada_ouro/kcor/dbo.TAuxTiposOcorrencias/",
								"input_name_TAuxTiposOcorrencias": "dbo_TAuxTiposOcorrencias",
								"input_options_TAuxTiposOcorrencias": "{}",
								"read_mode_TAuxOrigemChamado": "delta",
								"input_path_TAuxOrigemChamado": "/camada_ouro/kcor/dbo.TAuxOrigemChamado/",
								"input_name_TAuxOrigemChamado": "dbo_TAuxOrigemChamado",
								"input_options_TAuxOrigemChamado": "{}",
								"read_mode_DW_TRECHO_HOMOGENEO": "delta",
								"input_path_DW_TRECHO_HOMOGENEO": "/camada_ouro/kcor/dbo.DW_TRECHO_HOMOGENEO/",
								"input_name_DW_TRECHO_HOMOGENEO": "dbo_DW_TRECHO_HOMOGENEO",
								"input_options_DW_TRECHO_HOMOGENEO": "{}",
								"read_mode_TAuxSentidos": "delta",
								"input_path_TAuxSentidos": "/camada_ouro/kcor/dbo.TAuxSentidos/",
								"input_name_TAuxSentidos": "dbo_TAuxSentidos",
								"input_options_TAuxSentidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_OCORRENCIAS/",
								"output_name": "VW_KCOR_OCORRENCIAS",
								"output_options": "{}",
								"output_keys": "CD_RECURSO,Unidade_Origem",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_vitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_ocorrencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_FVITIMAS",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_path_TabVeiculosEnvolvidos": "/camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"input_name_TabVeiculosEnvolvidos": "dbo_TabVeiculosEnvolvidos",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"read_mode_TAuxTiposVeiculos": "delta",
								"input_path_TAuxTiposVeiculos": "/camada_ouro/kcor/dbo.TAuxTiposVeiculos/",
								"input_name_TAuxTiposVeiculos": "dbo_TAuxTiposVeiculos",
								"input_options_TAuxTiposVeiculos": "{}",
								"read_mode_TabVitimas": "delta",
								"input_path_TabVitimas": "/camada_ouro/kcor/dbo.TabVitimas/",
								"input_name_TabVitimas": "dbo_TabVitimas",
								"input_options_TabVitimas": "{}",
								"read_mode_TAuxVitPosicoes": "delta",
								"input_path_TAuxVitPosicoes": "/camada_ouro/kcor/dbo.TAuxVitPosicoes/",
								"input_name_TAuxVitPosicoes": "dbo_TAuxVitPosicoes",
								"input_options_TAuxVitPosicoes": "{}",
								"read_mode_TAuxVitSituacoes": "delta",
								"input_path_TAuxVitSituacoes": "/camada_ouro/kcor/dbo.TAuxVitSituacoes/",
								"input_name_TAuxVitSituacoes": "dbo_TAuxVitSituacoes",
								"input_options_TAuxVitSituacoes": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_FVITIMAS/",
								"output_name": "VW_KCOR_FVITIMAS",
								"output_options": "{}",
								"output_keys": "CD_RODOVIA,CD_CONCESSAO",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_veiculos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_vitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_FVEICULOS",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_path_TabVeiculosEnvolvidos": "/camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"input_name_TabVeiculosEnvolvidos": "dbo_TabVeiculosEnvolvidos",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"read_mode_TAuxTiposVeiculos": "delta",
								"input_path_TAuxTiposVeiculos": "/camada_ouro/kcor/dbo.TAuxTiposVeiculos/",
								"input_name_TAuxTiposVeiculos": "dbo_TAuxTiposVeiculos",
								"input_options_TAuxTiposVeiculos": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_FVEICULOS/",
								"output_name": "VW_KCOR_FVEICULOS",
								"output_options": "{}",
								"output_keys": "CD_NATUREZA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_kcor_vw_recursos_ocorrencia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_kcor_vw_veiculos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/KCOR/VW_KCOR_FRECURSOS_OCORRENCIA",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_path_TabOcorrencias": "/camada_ouro/kcor/dbo.TabOcorrencias/",
								"input_name_TabOcorrencias": "dbo_TabOcorrencias",
								"input_options_TabOcorrencias": "{}",
								"read_mode_TabRecursosAcionados": "delta",
								"input_path_TabRecursosAcionados": "/camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"input_name_TabRecursosAcionados": "dbo_TabRecursosAcionados",
								"input_options_TabRecursosAcionados": "{}",
								"read_mode_TAuxTiposAtendimentos": "delta",
								"input_path_TAuxTiposAtendimentos": "/camada_ouro/kcor/dbo.TAuxTiposAtendimentos/",
								"input_name_TAuxTiposAtendimentos": "dbo_TAuxTiposAtendimentos",
								"input_options_TAuxTiposAtendimentos": "{}",
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_path_TabVeiculosEnvolvidos": "/camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"input_name_TabVeiculosEnvolvidos": "dbo_TabVeiculosEnvolvidos",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"read_mode_TAuxTiposRecursos": "delta",
								"input_path_TAuxTiposRecursos": "/camada_ouro/kcor/dbo.TAuxTiposRecursos/",
								"input_name_TAuxTiposRecursos": "dbo_TAuxTiposRecursos",
								"input_options_TAuxTiposRecursos": "{}",
								"read_mode_TauxRecursos": "delta",
								"input_path_TauxRecursos": "/camada_ouro/kcor/dbo.TauxRecursos/",
								"input_name_TauxRecursos": "dbo_TauxRecursos",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/kcor/VW_KCOR_FRECURSOS_OCORRENCIA/",
								"output_name": "VW_KCOR_FRECURSOS_OCORRENCIA",
								"output_options": "{}",
								"output_keys": "CD_NATUREZA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_TRANS_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL do KCOR para ingestão dos dados transacionais",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "Executar_ingest_e050ecer",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_epst",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_pont",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_e135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_evis",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "Executar_ingest_esul",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_e101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "Executar_ingest_eara",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "Executar_ingest_ermin",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "Executar_ingest_enor",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_trans_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_trans_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_trans_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool",
						"defaultValue": false
					},
					"origem": {
						"type": "string"
					},
					"dias_atualizacao_etl": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:47:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_epst')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_epst')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_epst')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_pont')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_pont')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_pont')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_e135')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_e135')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_e135')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_evis')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_evis')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_evis')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_esul')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_esul')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_esul')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_e101')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_e101')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_e101')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_eara')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_eara')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_eara')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_trans_enor')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_trans_enor')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_trans_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_TUDO_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL de todas as tabelas (fato e dimensão) do KCOR",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "Executar_ingest_e050ecer",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_epst",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_pont",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_e135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_evis",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "Executar_ingest_esul",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_e101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "Executar_ingest_eara",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "Executar_ingest_ermin",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "Executar_ingest_enor",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_tudo_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_tudo_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_tudo_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool",
						"defaultValue": true
					},
					"origem": {
						"type": "string"
					},
					"dias_atualizacao_etl": {
						"type": "string",
						"defaultValue": "7"
					}
				},
				"folder": {
					"name": "KCOR/TUDO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:38:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_e050ecer')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_epst')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_epst')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_epst')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_pont')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_pont')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_pont')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_e135')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_e135')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_e135')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_evis')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_evis')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_evis')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_esul')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_esul')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_esul')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_e101')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_e101')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_e101')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_eara')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_eara')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_eara')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_ermin')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_kcor_tudo_enor')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_tudo_enor')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_tudo_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SGR_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL do SGR",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "catarata",
									"activities": [
										{
											"name": "Executar_ingest_sgr_catarata",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_catarata",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_catarata",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_catarata",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_catarata",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_catarata",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_catarata",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_catarata",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_sgr_e101",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_sgr_e135",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ecopara",
									"activities": [
										{
											"name": "Executar_ingest_sgr_ecopara",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_ecopara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_ecopara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_ecopara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_ecopara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_ecopara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_ecopara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_ecopara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ecosul",
									"activities": [
										{
											"name": "Executar_ingest_sgr_ecosul",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_ecosul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_ecosul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_ecosul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_ecosul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_ecosul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_ecosul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_ecosul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_sgr_epst",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_sgr_evis",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_sgr_pont",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_sgr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_sgr_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_sgr_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_sgr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_sgr_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_sgr_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_sgr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool",
						"defaultValue": true
					},
					"origem": {
						"type": "string"
					},
					"dias_atualizacao_etl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SGR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-18T19:58:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_catarata')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_catarata')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_catarata')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_e101')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_e135')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_ecopara')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_ecopara')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_ecopara')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_ecosul')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_ecosul')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_ecosul')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_epst')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_evis')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sgr_pont')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sgr_pont')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_sgr_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOLLN3_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL do TOLL N3",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'tipocarga' indicado no parâmetro inicial.\\nCaso 'tipocarga' = 'semanal' então realiza a ingestão de tabelas semanais;\\nCaso 'tipocarga' = 'diario' então realiza a ingestão de tabelas diárias;\\nCaso 'tipocarga' = 'historico' então realiza a ingestão de tabelas históricas e precisa verificar o campo 'ano' para verificar qual o ano dos dados a serem ingeridos.\\nCaso contrário não realiza processamento.",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.tipocarga",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "diaria",
									"activities": [
										{
											"name": "Executar_bronze_prata_tolln3_diario",
											"description": "Executa o processamento da camada bronze para prata",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tolln3_diario",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tolln3_diario",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_ingest_tolln3_diario",
											"description": "Executa a ingestão para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tolln3_diario",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													},
													"dias_atualizacao_p1": "2"
												}
											}
										},
										{
											"name": "Executar_prata_ouro_tolln3_diario",
											"description": "Executa o processamento da camada prata para a ouro",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tolln3_diario",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tolln3_diario",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "semanal",
									"activities": [
										{
											"name": "Executar_ingest_tolln3_semanal",
											"description": "Executa a ingestão para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tolln3_semanal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_tolln3_semanal",
											"description": "Executa o processamento da camada bronze para prata",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tolln3_semanal",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tolln3_semanal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_tolln3_semanal",
											"description": "Executa o processamento da camada prata para a ouro",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tolln3_semanal",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tolln3_semanal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "mensal",
									"activities": [
										{
											"name": "Executar_ingest_tolln3_mensal",
											"description": "Executa a ingestão para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tolln3_mensal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													},
													"dias_atualizacao_p1": "30"
												}
											}
										},
										{
											"name": "Executar_bronze_prata_tolln3_mensal",
											"description": "Executa o processamento da camada bronze para prata",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tolln3_mensal",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tolln3_mensal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_tolln3_mensal",
											"description": "Executa o processamento da camada prata para a ouro",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tolln3_mensal",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tolln3_mensal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipocarga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TOLLN3"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-09T15:13:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tolln3_diario')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_tolln3_diario')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tolln3_diario')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_tolln3_semanal')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tolln3_semanal')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tolln3_semanal')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_tolln3_mensal')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tolln3_mensal')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tolln3_mensal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOLLN3_SEM_PASSO1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão semanal de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('CATEGORIA'\n,'CONCESSAO'\n,'CP_SUBTPO_PGTO'\n,'CP_TIPO_PISTA'\n,'CP_TPO_PGTO'\n,'DIM_TIPO_PAGTO'\n,'OSA'\n,'OSA_CODIGO'\n,'PISTA'\n,'PRACA')\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaSemanal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/tabela_',  pipeline().parameters.atualizacao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T14:41:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLN3')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOLLPACKBI_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL do TOLLPACKBI",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'tipocarga' indicado no parâmetro inicial.",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.tipocarga",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "diaria",
									"activities": [
										{
											"name": "Executar_ingest_tollpackbi_diario",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tollpackbi_diario",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													},
													"dias_atualizacao_p1": "2"
												}
											}
										},
										{
											"name": "Executar_bronze_prata_tollpackbi_diario",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tollpackbi_diario",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tollpackbi_diario",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_tollpackbi_diario",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tollpackbi_diario",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tollpackbi_diario",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "semanal",
									"activities": [
										{
											"name": "Executar_ingest_tollpackbi_semanal",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tollpackbi_semanal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_tollpackbi",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tollpackbi_semanal",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tollpackbi_semanal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_tollpackbi_semanal",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tollpackbi",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tollpackbi_semanal",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "incremental",
									"activities": [
										{
											"name": "Executar_ingest_tollpackbi_incr",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tollpackbi_incr",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													},
													"dias_atualizacao_p1": "60"
												}
											}
										},
										{
											"name": "Executar_bronze_prata_tollpackbi_incr",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tollpackbi_incr",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tollpackbi_incr",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_tollpackbi_incr",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tollpackbi_incr",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tollpackbi_incr",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "tudo",
									"activities": [
										{
											"name": "Executar_ingest_tollpackbi_tudo",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_tollpackbi_tudo",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"atualizacao": {
														"value": "@pipeline().parameters.tipocarga",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_tollpackbi_tudo",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_tollpackbi_tudo",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_tollpackbi_tudo",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_tollpackbi_tudo",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_tollpackbi_tudo",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_tollpackbi_tudo",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipocarga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "TOLLPACKBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T20:38:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_tollpackbi_diario')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tollpackbi_diario')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tollpackbi_diario')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_tollpackbi_semanal')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tollpackbi_semanal')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tollpackbi_semanal')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_tollpackbi_incr')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tollpackbi_incr')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tollpackbi_incr')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_tollpackbi_tudo')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_tollpackbi_tudo')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_tollpackbi_tudo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOLLPACKBI_REPORT_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_toll_dim_classificacao_desconto",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TOLL_DIM_CLASSIFICACAO_DESCONTO",
							"baseParameters": {
								"read_mode_classificacao_desconto": "delta",
								"input_path_classificacao_desconto": "/camada_ouro/tollpackbi/dbo.DIM_CLASSIFICAO_DESCONTO/semanal/",
								"input_name_classificacao_desconto": "dbo_dim_classificao_desconto",
								"input_options_classificacao_desconto": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TOLL_DIM_CLASSIFICACAO_DESCONTO/",
								"output_name": "VW_TOLL_DIM_CLASSIFICACAO_DESCONTO",
								"output_options": "{}",
								"output_keys": "CD_CLASSIFICACAO_DESCONTO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_toll_dim_operador",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_toll_dim_classificacao_desconto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TOLL_DIM_OPERADOR",
							"baseParameters": {
								"read_mode_operador": "delta",
								"input_path_operador": "/camada_ouro/tollpackbi/dbo.DIM_OPERADOR/semanal/",
								"input_name_operador": "dbo_dim_operador",
								"input_options_operador": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TOLL_DIM_OPERADOR/",
								"output_name": "VW_TOLL_DIM_OPERADOR",
								"output_options": "{}",
								"output_keys": "CD_OPERADOR_SISTEMA",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_toll_dim_pista_praca_unidade",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_toll_dim_operador",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TOLL_DIM_PISTA_PRACA_UNIDADE",
							"baseParameters": {
								"read_mode_praca": "delta",
								"input_path_praca": "/camada_ouro/tollpackbi/dbo.DIM_PRACA/semanal/",
								"input_name_praca": "dbo_dim_praca",
								"input_options_praca": "{}",
								"read_mode_pista": "delta",
								"input_path_pista": "/camada_ouro/tollpackbi/dbo.DIM_PISTA/semanal/",
								"input_name_pista": "dbo_dim_pista",
								"input_options_pista": "{}",
								"read_mode_concessao": "delta",
								"input_path_concessao": "/camada_ouro/tollpackbi/dbo.DIM_CONCESSAO/semanal/",
								"input_name_concessao": "dbo_dim_concessao",
								"input_options_concessao": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TOLL_DIM_OPERADOR/",
								"output_name": "VW_TOLL_DIM_PISTA_PRACA_UNIDADE",
								"output_options": "{}",
								"output_keys": "CD_PISTA",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_toll_dim_tipo_pagamento",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_toll_dim_pista_praca_unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TOLL_DIM_TIPO_PAGAMENTO",
							"baseParameters": {
								"read_mode_tipo_pagamento": "delta",
								"input_path_tipo_pagamento": "/camada_ouro/tollpackbi/dbo.DIM_TIPO_PAGTO/semanal/",
								"input_name_tipo_pagamento": "dbo_dim_tipo_pagto",
								"input_options_tipo_pagamento": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TOLL_DIM_TIPO_PAGAMENTO/",
								"output_name": "VW_TOLL_DIM_TIPO_PAGAMENTO",
								"output_options": "{}",
								"output_keys": "CD_TPO_PGTO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_toll_extrato_trafego",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_toll_dim_tipo_pagamento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TOLL_EXTRATO_TRAFEGO",
							"baseParameters": {
								"read_mode_sentido": "delta",
								"input_path_sentido": "/camada_ouro/tollpackbi/dbo.DIM_SENTIDO/semanal/",
								"input_name_sentido": "dbo_dim_sentido",
								"input_options_sentido": "{}",
								"read_mode_categoria": "delta",
								"input_path_categoria": "/camada_ouro/tollpackbi/dbo.DIM_CATEGORIA/semanal/",
								"input_name_categoria": "dbo_dim_categoria",
								"input_options_categoria": "{}",
								"read_mode_fact_extrato_trafego": "delta",
								"input_path_fact_extrato_trafego": "camada_ouro/tollpackbi/dbo.FACT_EXTRATO_TRAFEGO/incremental/",
								"input_name_fact_extrato_trafego": "dbo_fact_extrato_trafego",
								"input_options_fact_extrato_trafego": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TOLL_EXTRATO_TRAFEGO/",
								"output_name": "VW_TOLL_EXTRATO_TRAFEGO",
								"output_options": "{}",
								"output_keys": "DATA,CD_PRACA,CD_CONCESSAO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_toll_trafego_nsr_et",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tollpackbi_extrato_trafego_consolidado",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TOLLPACKBI_EXTRATO_TRAFEGO_CONSOLIDADO",
							"baseParameters": {
								"read_mode_praca": "delta",
								"input_path_praca": "/camada_ouro/tollpackbi/dbo.DIM_PRACA/semanal/",
								"input_name_praca": "dbo_dim_praca",
								"input_options_praca": "{}",
								"read_mode_pista": "delta",
								"input_path_pista": "/camada_ouro/tollpackbi/dbo.DIM_PISTA/semanal/",
								"input_name_pista": "dbo_dim_pista",
								"input_options_pista": "{}",
								"read_mode_categoria": "delta",
								"input_path_categoria": "/camada_ouro/tollpackbi/dbo.DIM_CATEGORIA/semanal/",
								"input_name_categoria": "dbo_dim_categoria",
								"input_options_categoria": "{}",
								"read_mode_tipo_pagamento": "delta",
								"input_path_tipo_pagamento": "/camada_ouro/tollpackbi/dbo.DIM_TIPO_PAGTO/semanal/",
								"input_name_tipo_pagamento": "dbo_dim_tipo_pagto",
								"input_options_tipo_pagamento": "{}",
								"read_mode_fact_extrato_trafego": "delta",
								"input_path_fact_extrato_trafego": "camada_ouro/tollpackbi/dbo.FACT_EXTRATO_TRAFEGO/incremental/",
								"input_name_fact_extrato_trafego": "dbo_fact_extrato_trafego",
								"input_options_fact_extrato_trafego": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TOLLPACKBI_EXTRATO_TRAFEGO_CONSOLIDADO/",
								"output_name": "VW_TOLLPACKBI_EXTRATO_TRAFEGO_CONSOLIDADO",
								"output_options": "{}",
								"output_keys": "DATA_SAIDA,CD_CONCESSAO,PRACA,CD_PISTA,TIPO_PISTA,id_osa,id_operador,TIPO_PAGTO,TIPO_VALIDACAO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tollpackbi_extrato_trafego_consolidado",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_toll_extrato_trafego",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/TOLLPACKBI/VW_TRAFEGO_NSR_ET",
							"baseParameters": {
								"read_mode_praca": "delta",
								"input_path_praca": "/camada_ouro/tollpackbi/dbo.DIM_PRACA/semanal/",
								"input_name_praca": "dbo_dim_praca",
								"input_options_praca": "{}",
								"read_mode_pista": "delta",
								"input_path_pista": "/camada_ouro/tollpackbi/dbo.DIM_PISTA/semanal/",
								"input_name_pista": "dbo_dim_pista",
								"input_options_pista": "{}",
								"read_mode_concessao": "delta",
								"input_path_concessao": "/camada_ouro/tollpackbi/dbo.DIM_CONCESSAO/semanal/",
								"input_name_concessao": "dbo_dim_concessao",
								"input_options_concessao": "{}",
								"read_mode_categoria": "delta",
								"input_path_categoria": "/camada_ouro/tollpackbi/dbo.DIM_CATEGORIA/semanal/",
								"input_name_categoria": "dbo_dim_categoria",
								"input_options_categoria": "{}",
								"read_mode_tipo_pagamento": "delta",
								"input_path_tipo_pagamento": "/camada_ouro/tollpackbi/dbo.DIM_TIPO_PAGTO/semanal/",
								"input_name_tipo_pagamento": "dbo_dim_tipo_pagto",
								"input_options_tipo_pagamento": "{}",
								"read_mode_dim_classificao_desconto": "delta",
								"input_path_dim_classificao_desconto": "/camada_ouro/tollpackbi/dbo.DIM_CLASSIFICAO_DESCONTO/semanal/",
								"input_name_dim_classificao_desconto": "dbo_dim_classificao_desconto",
								"input_options_dim_classificao_desconto": "{}",
								"read_mode_fact_extrato_trafego": "delta",
								"input_path_fact_extrato_trafego": "camada_ouro/tollpackbi/dbo.FACT_EXTRATO_TRAFEGO/incremental/",
								"input_name_fact_extrato_trafego": "dbo_fact_extrato_trafego",
								"input_options_fact_extrato_trafego": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/tollpackbi/VW_TRAFEGO_NSR_ET/",
								"output_name": "VW_TRAFEGO_NSR_ET",
								"output_options": "{}",
								"output_keys": "ID,DATA,CD_PRACA,TIPO_PISTA,TIPO_VEICULO,CD_SENTIDO,CD_CATEG,TIPO_PAGTO,CD_OSA",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLPACKBI"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TeamsNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline responsável pela notificação, via canal no Teams, em caso de falha de pipeline.",
				"activities": [
					{
						"name": "Set JSON Schema",
						"description": "Cria a mensagem JSON a ser enviada pelo WebHook",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "messageCard",
							"value": {
								"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"0076D7\",\n    \"summary\": \"Pipeline status alert message\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Alerta de execução de pipeline\",\n            \"facts\": [\n                {\n                    \"name\": \"Subscription Id:\",\n                    \"value\": \"@{pipeline().parameters.subscription}\"\n                },\n                {\n                    \"name\": \"Resource Group:\",\n                    \"value\": \"@{pipeline().parameters.resourceGroup}\"\n                },\n                {\n                    \"name\": \"Workspace Synapse:\",\n                    \"value\": \"@{pipeline().DataFactory}\"\n                },\n                {\n                    \"name\": \"RunId da Pipeline:\",\n                    \"value\": \"@{pipeline().parameters.runId}\"\n                },\n                {\n                    \"name\": \"Nome de Pipeline:\",\n                    \"value\": \"@{pipeline().parameters.name}\"\n                },\n                {\n                    \"name\": \"Status da Pipeline:\",\n                    \"value\": \"@{pipeline().parameters.status}\"\n                },\n                {\n                    \"name\": \"Inicio de Execução (UTC):\",\n                    \"value\": \"@{pipeline().parameters.triggerTime}\"\n                },\n                {\n                    \"name\": \"Mensagem:\",\n                    \"value\": \"@{pipeline().parameters.message}\"\n                },\n                {\n                    \"name\": \"Horário da Notificação (UTC):\",\n                    \"value\": \"@{utcnow()}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ],\n    \"potentialAction\": [\n        {\n            \"@type\": \"OpenUri\",\n            \"name\": \"Verificar o Monitoramento de Pipeline\",\n            \"targets\": [\n                {\n                    \"os\": \"default\",\n                    \"uri\": \"@{concat('https://synapse.azure.com/monitoring/pipelineruns/',pipeline().parameters.runId,'?factory=/subscriptions/',pipeline().parameters.subscription,'/resourceGroups/',pipeline().parameters.resourceGroup,'/providers/Microsoft.DataFactory/factories/',pipeline().DataFactory)}\"\n                }\n            ]\n        }\n    ]\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Invoke Teams Webhook URL",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set JSON Schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.teamWebhookUrl",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@variables('messageCard')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"subscription": {
						"type": "string"
					},
					"resourceGroup": {
						"type": "string"
					},
					"runId": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"triggerTime": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"teamWebhookUrl": {
						"type": "string"
					}
				},
				"variables": {
					"messageCard": {
						"type": "String"
					}
				},
				"folder": {
					"name": "CONTROLE"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_ouro_flat_flat_file_kcor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_kcor_dbo_aux_cobertura_praca",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_kcor_dbo_aux_cobertura_praca",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_kcor_dbo_aux_rodovia_concessao",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_kcor_dbo_aux_rodovia_concessao",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_kcor_dbo_dw_trecho_homogeneo",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_kcor_dbo_dw_trecho_homogeneo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_kcor_dbo_aux_cobertura_praca",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "bronze_prata_kcor_dbo_aux_cobertura_praca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_kcor_dbo_aux_cobertura_praca",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_kcor_dbo_aux_rodovia_concessao",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "bronze_prata_kcor_dbo_aux_rodovia_concessao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_kcor_dbo_aux_rodovia_concessao",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_kcor_dbo_dw_trecho_homogeneo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "bronze_prata_kcor_dbo_dw_trecho_homogeneo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_kcor_dbo_dw_trecho_homogeneo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00_WORKFLOW/FLAT_FILE"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_dbo_aux_cobertura_praca')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_dbo_aux_rodovia_concessao')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_kcor_dbo_dw_trecho_homogeneo')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_dbo_aux_cobertura_praca')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_dbo_aux_rodovia_concessao')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_kcor_dbo_dw_trecho_homogeneo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_ecompras_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_ecompras_fornecedor",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/ecompras/fornecedor/",
								"input_name": "ecompras_fornecedor",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/ecompras/fornecedor/",
								"output_name": "ecompras_fornecedor",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_FORNECEDOR"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/ECOMPRAS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_ecompras_vw_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_ecompras_vw_fornecedor",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/ecompras/vw_fornecedor/",
								"input_name": "ecompras_vw_fornecedor",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/ecompras/vw_fornecedor/",
								"output_name": "ecompras_vw_fornecedor",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_FORNECEDOR"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/ECOMPRAS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_area_direito')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_area_direito",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/area_direito",
								"input_name": "juridico_area_direito",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/area_direito/",
								"output_name": "juridico_area_direito",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_AREA_DIREITO"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_empresa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_empresa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/empresa",
								"input_name": "juridico_empresa",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/empresa/",
								"output_name": "juridico_empresa",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_EMPRESA"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_grupo_empresa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_grupo_empresa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/grupo_empresa",
								"input_name": "juridico_grupo_empresa",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/grupo_empresa/",
								"output_name": "juridico_grupo_empresa",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_GRUPO_EMPRESA"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_origem_causa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_origem_causa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/origem_causa",
								"input_name": "juridico_origem_causa",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/origem_causa/",
								"output_name": "juridico_origem_causa",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_ORIGEM_CAUSA"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_parte_contraria')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_parte_contraria",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/parte_contraria",
								"input_name": "juridico_parte_contraria",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/parte_contraria/",
								"output_name": "juridico_parte_contraria",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_PARTE_CONTRARIA"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_processo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_processo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/processo",
								"input_name": "juridico_processo",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/processo/",
								"output_name": "juridico_processo",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_PROCESSO"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_processo_valores_pagamento_ass')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_processo_valores_pagamento_ass",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/processo_valores_pagamento_ass",
								"input_name": "juridico_processo_valores_pagamento_ass",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/processo_valores_pagamento_ass/",
								"output_name": "juridico_processo_valores_pagamento_ass",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_PROCESSO_VALORES_PAGAMENTO_ASS"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_td_processo_resultado')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_td_processo_resultado",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/td_processo_resultado",
								"input_name": "juridico_td_processo_resultado",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/td_processo_resultado/",
								"output_name": "juridico_td_processo_resultado",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_PROCESSO_RESULTADO"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_td_processo_status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_td_processo_status",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/td_processo_status",
								"input_name": "juridico_td_processo_status",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/td_processo_status/",
								"output_name": "juridico_td_processo_status",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_PROCESSO_STATUS"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_tipo_motivo_encerramento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_tipo_motivo_encerramento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/tipo_motivo_encerramento",
								"input_name": "juridico_tipo_motivo_encerramento",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/tipo_motivo_encerramento/",
								"output_name": "juridico_tipo_motivo_encerramento",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "cd_tipo_motivo_encerramento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_juridico_unidade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_juridico_unidade",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/juridico/unidade",
								"input_name": "juridico_unidade",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/juridico/unidade/",
								"output_name": "juridico_unidade",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_UNIDADE"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_dbo_aux_cobertura_praca')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_kcor_dbo_aux_cobertura_praca",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/kcor/dbo.aux_cobertura_praca/",
								"input_name": "dbo.aux_cobertura_praca",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "camada_prata/kcor/dbo.aux_cobertura_praca/",
								"output_name": "dbo.aux_cobertura_praca",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CD_PRACA"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_dbo_aux_rodovia_concessao')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_kcor_dbo_aux_rodovia_concessao",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/kcor/dbo.aux_rodovia_concessao/",
								"input_name": "dbo.aux_rodovia_concessao",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "camada_prata/kcor/dbo.aux_rodovia_concessao/",
								"output_name": "dbo.aux_rodovia_concessao",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "CodRodovia"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_dbo_dw_trecho_homogeneo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_kcor_dbo_dw_trecho_homogeneo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "camada_bronze/kcor/dbo.dw_trecho_homogeneo/",
								"input_name": "dbo.dw_trecho_homogeneo",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "camada_prata/kcor/dbo.dw_trecho_homogeneo/",
								"output_name": "dbo.dw_trecho_homogeneo",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "ID_TH_GRUPO"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_e050ecer_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('pasta_atual'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pasta_atual",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_e101_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_e135_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_eara_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_enor_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_epst_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_ermin_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_esul_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_evis_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\"\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TauxRecursos\", \"dbo.TabConservacao\", \"dbo.TabAnimais\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_incr_pont_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_incr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T14:47:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T14:47:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T12:55:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T12:55:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T12:57:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T12:57:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T12:57:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_trans_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor_trans/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentesAb\", \"dbo.TabOcorrenciasAb\", \"dbo.TabRecursosAcionadosAb\", \"dbo.TabRecursosCoberturasAb\", \"dbo.TabVeiculosEnvolvidosAb\", \"dbo.TabVitimasAB\", \"dbo.TabConservacaoAB\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_trans",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor_trans/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor_trans/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T12:57:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e050_ecer/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T13:57:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:05:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:07:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/eara/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:09:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/enor/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:11:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:13:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/ermin/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:15:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/esul/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:17:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:19:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_kcor_tudo_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TabAcidentes\", \"dbo.TabOcorrencias\", dbo.TabRecursosAcionados\", \"dbo.TabVeiculosEnvolvidos\", \"dbo.TabVitimas\", \"dbo.TabConservacao\", \"dbo.TabRecursosCoberturas\"]"
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_kcor_tudo",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/kcor/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/kcor/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T14:21:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_ecc_ekko')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_ecc_ekko",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_ecc/ekko/",
								"input_name": "ekko",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_ecc/ekko/",
								"output_name": "ekko",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "LIFNR"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_ECC"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_empcompensation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_empCompensation",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/emp_compensation/",
								"input_name": "emp_compensation",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/emp_compensation/",
								"output_name": "emp_compensation",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "userId"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_empemployment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_empEmployment",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/emp_employment/",
								"input_name": "emp_employment",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/emp_employment/",
								"output_name": "emp_employment",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "userId"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_empjob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_empJob",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/emp_job/",
								"input_name": "emp_job",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/emp_job/",
								"output_name": "emp_job",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "userId"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_emppaycomprecurring')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_empPayCompRecurring",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/emp_pay_comp_recurring/",
								"input_name": "emp_pay_comp_recurring",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/emp_pay_comp_recurring/",
								"output_name": "emp_pay_comp_recurring",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "userId"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_focompany')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_FOCompany",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/fo_company/",
								"input_name": "fo_company",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/fo_company/",
								"output_name": "fo_company",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "externalCode"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_fodepartment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_FOCompany",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/fo_department/",
								"input_name": "fo_department",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/fo_department/",
								"output_name": "fo_department",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "externalCode"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_fopaycomponent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_FOPayComponent",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/fo_pay_component/",
								"input_name": "fo_pay_component",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/fo_pay_component/",
								"output_name": "fo_pay_component",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "externalCode"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pernationalid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_perNationalId",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/per_national_id/",
								"input_name": "per_national_id",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/per_national_id/",
								"output_name": "per_national_id",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "personIdExternal"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_perperson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_perPerson",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/per_person/",
								"input_name": "per_person",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/per_person/",
								"output_name": "per_person",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "personIdExternal"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_perpersonal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_perPerson",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/per_personal/",
								"input_name": "per_personal",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/per_personal/",
								"output_name": "per_personal",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "personIdExternal"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pl_contract_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_pl_contract_type",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pl_contract_type/",
								"input_name": "pl_contract_type",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pl_contract_type/",
								"output_name": "pl_contract_type",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "id"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pl_employee_class')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_pl_employee_class",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pl_employee_class/",
								"input_name": "pl_employee_class",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pl_employee_class/",
								"output_name": "pl_employee_class",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "id"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pl_employment_relationship')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_pl_employment_relationship",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pl_employment_relationship/",
								"input_name": "pl_employment_relationship",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pl_employment_relationship/",
								"output_name": "pl_employment_relationship",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "items"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pl_employment_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_pl_employment_type",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pl_employment_type/",
								"input_name": "pl_employment_type",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pl_employment_type/",
								"output_name": "pl_employment_type",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "label"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pl_state_bra')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_pl_state_bra",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pl_state_bra/",
								"input_name": "pl_state_bra",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pl_state_bra/",
								"output_name": "pl_state_bra",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "id"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pwbi01o')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_PWBI01O",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pwbi01o/",
								"input_name": "pwbi01o",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pwbi01o/",
								"output_name": "pwbi01o",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "matricula,periodo,rubrica"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sap_sf_pwbi04')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_PWBI04",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/pwbi04/",
								"input_name": "pwbi04",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/pwbi04/",
								"output_name": "pwbi04",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "matricula"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_catarata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/catarata/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/catarata/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_catarata",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/CATARATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:22:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_catarata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/e101/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:27:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/e135/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:29:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_ecopara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/ecopara/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/ecopara/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_ecopara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/ECOPARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:30:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_ecopara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_ecosul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/ecosul/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/ecosul/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_ecosul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/ECOSUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:32:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_ecosul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/epst/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:38:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/evis/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:40:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_sgr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/sgr/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().type, 'Folder'),startswith(item().name,'dbo'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_sgr",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/sgr/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/sgr/', variables('pasta_atual'), '/pont/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T20:43:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tolln3_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento diário de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tolln3/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     equals(item().name, 'dbo.PAGAMENTO'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tolln3",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tolln3/', variables('pasta_atual'), '/diaria/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tolln3/', variables('pasta_atual'), '/diaria/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T16:47:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tolln3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tolln3_mensal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento mensal de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tolln3/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas e tabelas mensais",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     equals(item().name, 'dbo.TRANSITO_FECHAMENTO'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tolln3",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tolln3/', variables('pasta_atual'), '/mensal/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tolln3/', variables('pasta_atual'), '/mensal/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/MENSAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-05T14:38:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tolln3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tolln3_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento semanal de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tolln3/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas e tabelas mensais",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     not(or(equals(item().name, 'dbo.PAGAMENTO'),\n            equals(item().name, 'dbo.TRANSITO_FECHAMENTO'))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tolln3",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tolln3/', variables('pasta_atual'), '/semanal/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tolln3/', variables('pasta_atual'), '/semanal/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-05T17:18:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tolln3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tollpackbi_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento diário de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tollpackbi/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     equals(item().name, 'dbo.FACT_EXTRATO_OPERACIONAL'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tollpackbi",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tollpackbi/', variables('pasta_atual'), '/diaria/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tollpackbi/', variables('pasta_atual'), '/diaria/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T19:31:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tollpackbi_incr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento incremental de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tollpackbi/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas e tabelas",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     equals(item().name, 'dbo.FACT_EXTRATO_TRAFEGO'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tollpackbi",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tollpackbi/', variables('pasta_atual'), '/incremental/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tollpackbi/', variables('pasta_atual'), '/incremental/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/INCREMENTAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-09T16:56:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tollpackbi_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento semanal de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tollpackbi/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas e tabelas mensais",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     not(or(equals(item().name, 'dbo.FACT_EXTRATO_OPERACIONAL'),\n            equals(item().name, 'dbo.FACT_EXTRATO_TRAFEGO'))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tollpackbi",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tollpackbi/', variables('pasta_atual'), '/semanal/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tollpackbi/', variables('pasta_atual'), '/semanal/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-09T16:44:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bronze_prata_tollpackbi_tudo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento semanal de tabelas (em formato parquet) da camada bronze para camada prata (formato delta)",
				"activities": [
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_bronze/tollpackbi/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas e tabelas mensais",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     equals(item().name, 'dbo.DIM_OPERADOR'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "bronze_prata_tollpackbi",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.0:30:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/02-PRATA/templates/template_bronze_prata",
										"baseParameters": {
											"input_path": {
												"value": "@concat('camada_bronze/tollpackbi/', variables('pasta_atual'), '/tudo/')",
												"type": "Expression"
											},
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_format": "parquet",
											"input_options": "{}",
											"read_mode": "delta",
											"output_path": {
												"value": "@concat('camada_prata/tollpackbi/', variables('pasta_atual'), '/tudo/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
											"output_keys": {
												"value": "@variables('chave')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					},
					"nome_tabela": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/TUDO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-09T17:05:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/broze_prata_sap_sf_empworkpermit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "bronze_prata_sap_sf_empWorkPermit",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/02-PRATA/templates/template_bronze_prata",
							"baseParameters": {
								"input_path": "/camada_bronze/sap_sf/emp_work_permit/",
								"input_name": "emp_work_permit",
								"input_format": "parquet",
								"input_options": "{}",
								"read_mode": "delta",
								"output_path": "/camada_prata/sap_sf/emp_work_permit/",
								"output_name": "emp_work_permit",
								"output_options": "{\"delta.columnMapping.mode\": \"name\"}",
								"output_keys": "userId"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "02_BRONZE_PRATA/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_ecompras_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromEcomprasFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerEcompras",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "FORNECEDOR"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/ecompras/fornecedor",
												"arquivo": {
													"value": "@concat('ecompras_fornecedor__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromEcomprasIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM e_compras.dbo.FORNECEDOR\nWHERE DH_ATUALIZACAO >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerEcompras",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "FORNECEDOR"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/ecompras/fornecedor",
												"arquivo": {
													"value": "@concat('ecompras_fornecedor__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/ECOMPRAS"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerEcompras')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_ecompras_vw_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEcomprasVwFornecedor",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerEcompras",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "VW_FORNECEDOR_PAINEL_CONTROLE_ADMIN"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": "camada_bronze/ecompras/vw_fornecedor",
									"arquivo": {
										"value": "@concat('ecompras_vw_fornecedor__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/ECOMPRAS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T21:44:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerEcompras')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_area_direito')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoAreaDireitoFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "AREA_DIREITO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/area_direito",
												"arquivo": {
													"value": "@concat('juridico_area_direito__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoAreaDireitoIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.AREA_DIREITO\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "AREA_DIREITO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/area_direito",
												"arquivo": {
													"value": "@concat('juridico_area_direito__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_empresa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoEmpresaFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "EMPRESA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/empresa",
												"arquivo": {
													"value": "@concat('juridico_empresa__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoEmpresaIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.EMPRESA\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "EMPRESA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/empresa",
												"arquivo": {
													"value": "@concat('juridico_empresa__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_grupo_empresa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoGrupoEmpresaFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "GRUPO_EMPRESA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/grupo_empresa",
												"arquivo": {
													"value": "@concat('juridico_grupo_empresa__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoGrupoEmpresaIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.GRUPO_EMPRESA\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "GRUPO_EMPRESA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/grupo_empresa",
												"arquivo": {
													"value": "@concat('juridico_grupo_empresa__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_origem_causa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoOrigemCausaFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "ORIGEM_CAUSA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/origem_causa",
												"arquivo": {
													"value": "@concat('juridico_origem_causa__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoOrigemCausaIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.ORIGEM_CAUSA\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "ORIGEM_CAUSA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/origem_causa",
												"arquivo": {
													"value": "@concat('juridico_origem_causa__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_parte_contraria')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoParteContrariaFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "PARTE_CONTRARIA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/parte_contraria",
												"arquivo": {
													"value": "@concat('juridico_parte_contraria__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoParteContrariaIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.PARTE_CONTRARIA\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "PARTE_CONTRARIA"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/parte_contraria",
												"arquivo": {
													"value": "@concat('juridico_parte_contraria__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_processo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoProcessoFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "PROCESSO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/processo",
												"arquivo": {
													"value": "@concat('juridico_processo__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoProcessoIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.PROCESSO\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "PROCESSO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/processo",
												"arquivo": {
													"value": "@concat('juridico_processo__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_processo_valores_pagamento_ass')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoProcessoValoresPagamentoFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "PROCESSO_VALORES_PAGAMENTO_ASS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/processo_valores_pagamento_ass",
												"arquivo": {
													"value": "@concat('juridico_processo_valores_pagamento_ass__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoProcessoValoresPagamentoIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.PROCESSO_VALORES_PAGAMENTO_ASS\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "PROCESSO_VALORES_PAGAMENTO_ASS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/processo_valores_pagamento_ass",
												"arquivo": {
													"value": "@concat('juridico_processo_valores_pagamento_ass__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_td_processo_resultado')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromJuridicoTdProcessoResultadoFull",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerJuridico",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "TD_PROCESSO_RESULTADO"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": "camada_bronze/juridico/td_processo_resultado",
									"arquivo": {
										"value": "@concat('juridico_td_processo_resultado__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_td_processo_status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoTdProcessoStatusFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "TD_PROCESSO_STATUS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/td_processo_status",
												"arquivo": {
													"value": "@concat('juridico_td_processo_status__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoTdProcessoStatusIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.TD_PROCESSO_STATUS\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "TD_PROCESSO_STATUS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/td_processo_status",
												"arquivo": {
													"value": "@concat('juridico_td_processo_status__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_tipo_motivo_encerramento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoTipoMotivoEncerramentoFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "TIPO_MOTIVO_ENCERRAMENTO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/tipo_motivo_encerramento",
												"arquivo": {
													"value": "@concat('juridico_tipo_motivo_encerramento__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoTipoMotivoEncerramentoIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.TIPO_MOTIVO_ENCERRAMENTO\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "TIPO_MOTIVO_ENCERRAMENTO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/tipo_motivo_encerramento",
												"arquivo": {
													"value": "@concat('juridico_tipo_motivo_encerramento__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_juridico_unidade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromJuridicoUnidadeFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "UNIDADE"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/unidade",
												"arquivo": {
													"value": "@concat('juridico_unidade__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromJuridicoUnidadeIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM JURIDICO.dbo.UNIDADE\nWHERE DH_TIMESTAMP >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerJuridico",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "UNIDADE"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/juridico/unidade",
												"arquivo": {
													"value": "@concat('juridico_unidade__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerJuridico')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E050ECER",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T17:46:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e050ecer_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E050ECER",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ',variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T17:56:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e101_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ',variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T21:58:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T18:15:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e135_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T18:48:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_eara_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Econoroeste para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\r\nFROM SYS.TABLES TB1\r\nINNER JOIN SYS.SCHEMAS TB2\r\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\r\nWHERE TB1.NAME IN ('TabAcidentes'\r\n\t\t\t\t\t,'TabOcorrencias'\r\n\t\t\t\t\t,'TabRecursosAcionados'\r\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\r\n\t\t\t\t\t,'TabVitimas'\r\n\t\t\t\t\t,'TauxRecursos'\r\n\t\t\t\t\t,'TabConservacao'\r\n\t\t\t\t\t,'TabAnimais'\r\n\t\t\t\t\t,'TabRecursosCoberturas'\r\n)\r\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ENOR",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T19:08:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ENOR')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_enor_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Econoroeste para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\r\nFROM SYS.TABLES TB1\r\nINNER JOIN SYS.SCHEMAS TB2\r\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\r\nWHERE TB1.NAME IN ('TAuxSentidos',\r\n\t\t\t\t\t'TAuxTiposAcidentes',\r\n\t\t\t\t\t'TAuxTiposAtendimentos',\r\n\t\t\t\t\t'TAuxTiposOcorrencias',\r\n\t\t\t\t\t'TAuxTiposRecursos',\r\n\t\t\t\t\t'TAuxTiposVeiculos',\r\n\t\t\t\t\t'TAuxVitPosicoes',\r\n\t\t\t\t\t'TAuxVitSituacoes',\r\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\r\n\t\t\t\t\t'TAuxCausasProvaveis',\r\n\t\t\t\t\t'TAuxOrigemChamado',\r\n\t\t\t\t\t'TAuxConservGestores',\r\n\t\t\t\t\t'TAuxConservStatus',\r\n\t\t\t\t\t'TAuxConservTipos',\r\n\t\t\t\t\t'TAuxConservOrigem',\r\n\t\t\t\t\t'TAuxAnimais',\r\n\t\t\t\t\t'TAuxAnimaisDestinos',\r\n\t\t\t\t\t'TAuxTiposProvAnimais',\r\n\t\t\t\t\t'TAuxFuncionarios',\r\n\t\t\t\t\t'TAuxRodovias'\r\n)\r\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ENOR",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ENOR')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EPST",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela,variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-13T12:53:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_epst_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EPST",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ERMIN",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-13T13:01:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ERMIN')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_ermin_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ERMIN",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ERMIN')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da  Ecosul para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ESUL",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-13T13:16:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ESUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_esul_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da  Ecosul para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ESUL",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ESUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da  Ecovias para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EVIS",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela,variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-13T13:28:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EVIS')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_evis_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da  Ecovias para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EVIS",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T21:58:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EVIS')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecoponte para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_PONT",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-13T13:37:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_pont_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecoponte para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_PONT",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E050ECER",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelas_aux": {
						"type": "Array"
					},
					"parquet": {
						"type": "String"
					},
					"tabelas_auxiliares": {
						"type": "Array"
					},
					"arquivo_data": {
						"type": "String"
					},
					"ultima_data": {
						"type": "String"
					},
					"variavel_controle": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:06:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E101",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:08:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabConservacaoAB'\n\t\t\t\t\t,'TabVitimasAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:09:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:11:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_eara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Econoroeste para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ENOR",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:13:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ENOR')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EPST",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:14:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ERMIN",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:15:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ERMIN')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecosul para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ESUL",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ESUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EVIS",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:17:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EVIS')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_trans_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecoponte para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN (\t'TabAcidentesAb'\n\t\t\t\t\t,'TabOcorrenciasAb'\n\t\t\t\t\t,'TabRecursosAcionadosAb'\n\t\t\t\t\t,'TabRecursosCoberturasAb'\n\t\t\t\t\t,'TabVeiculosEnvolvidosAb'\n\t\t\t\t\t,'TabVitimasAb'\n\t\t\t\t\t,'TabConservacaoAB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_PONT",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor_trans/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T13:18:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E050ECER",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:24:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E050ECER')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E101",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:25:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:26:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:27:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ENOR",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:28:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ENOR')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_enor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EPST",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:29:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecoriominas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ERMIN",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_ermin",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:30:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ERMIN')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_ermin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecosul para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ESUL",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_esul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:31:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_ESUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_esul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EVIS",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:32:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_EVIS')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_tudo_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecoponte para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_PONT",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/TUDO/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:33:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_KCOR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_prata_ecompras')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_ecompras_fornecedor",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_ecompras_fornecedor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_ecompras_vw_fornecedor",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_ecompras_vw_fornecedor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_ecompras_fornecedor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_ecompras_fornecedor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_ecompras_fornecedor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_ecompras_vw_fornecedor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_ecompras_vw_fornecedor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_ecompras_vw_fornecedor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_WORKFLOW/INGESTAO_PRATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T23:42:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_ecompras_fornecedor')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_ecompras_vw_fornecedor')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_ecompras_fornecedor')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_ecompras_vw_fornecedor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_prata_juridico')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_juridico_area_direito",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_area_direito",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_empresa",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_empresa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_grupo_empresa",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_grupo_empresa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_origem_causa",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_origem_causa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_parte_contraria",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_parte_contraria",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_processo",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_processo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_processo_valores_pagamento_ass",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_processo_valores_pagamento_ass",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_td_processo_resultado",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_td_processo_resultado",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_juridico_td_processo_status",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_td_processo_status",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ingest_juridico_tipo_motivo_encerramento",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_tipo_motivo_encerramento",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_juridico_unidade",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_juridico_unidade",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "bronze_prata_juridico_area_direito",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_area_direito",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_area_direito",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_empresa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_empresa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_empresa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_grupo_empresa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_grupo_empresa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_grupo_empresa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_origem_causa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_origem_causa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_origem_causa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_parte_contraria",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_parte_contraria",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_parte_contraria",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_processo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_processo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_processo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_processo_valores_pagamento_ass",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_processo_valores_pagamento_ass",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_processo_valores_pagamento_ass",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_unidade",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_unidade",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_td_processo_status",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_td_processo_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_td_processo_status",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_juridico_td_processo_resultado",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_juridico_td_processo_resultado",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_juridico_td_processo_resultado",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_WORKFLOW/INGESTAO_PRATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T23:42:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_area_direito')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_empresa')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_grupo_empresa')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_origem_causa')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_parte_contraria')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_processo')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_processo_valores_pagamento_ass')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_td_processo_resultado')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_td_processo_status')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_tipo_motivo_encerramento')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_juridico_unidade')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_area_direito')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_empresa')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_grupo_empresa')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_origem_causa')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_parte_contraria')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_processo')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_processo_valores_pagamento_ass')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_unidade')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_td_processo_status')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_juridico_td_processo_resultado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_prata_pessoa_pagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_sap_sf_empcompensation",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_empcompensation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_empcompensation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_empcompensation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_empcompensation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_empemployment",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_empemployment",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_empemployment",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_empemployment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_empemployment",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_empjob",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_empjob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_empjob",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_empjob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_empjob",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_emppaycomprecurring",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_emppaycomprecurring",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_emppaycomprecurring",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_emppaycomprecurring",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_emppaycomprecurring",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_empworkpermit",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_empworkpermit",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "broze_prata_sap_sf_empworkpermit",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_empworkpermit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "broze_prata_sap_sf_empworkpermit",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_focompany",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_focompany",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_focompany",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_focompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_focompany",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_fodepartment",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_fodepartment",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_fodepartment",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_fodepartment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_fodepartment",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_fopaycomponent",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_fopaycomponent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_fopaycomponent",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_fopaycomponent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_fopaycomponent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_pernationalid",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_pernationalid",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pernationalid",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_pernationalid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pernationalid",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_perperson",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_perperson",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_perperson",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_perperson",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_perperson",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_perpersonal",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_perpersonal",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_perpersonal",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_perpersonal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_perpersonal",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_picklist_contract_type",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_picklist_contract_type",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pl_contract_type",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_picklist_contract_type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pl_contract_type",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_picklist_employee_class",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_picklist_employee_class",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pl_employee_class",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_picklist_employee_class",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pl_employee_class",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_picklist_employment_relationship",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_picklist_employment_relationship",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pl_employment_relationship",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_picklist_employment_relationship",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pl_employment_relationship",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_picklist_employment_type",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_picklist_employment_type",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pl_employment_type",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_picklist_employment_type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pl_employment_type",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_picklist_state_bra",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_picklist_state_bra",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pl_state_bra",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_picklist_state_bra",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pl_state_bra",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_pwbi01o",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_pwbi01o",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pwbi01o",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_pwbi01o",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pwbi01o",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ingest_sap_sf_pwbi04",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_sf_pwbi04",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "bronze_prata_sap_sf_pwbi04",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_sf_pwbi04",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_sf_pwbi04",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00_WORKFLOW/INGESTAO_PRATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-18T21:38:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_empcompensation')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_empcompensation')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_empemployment')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_empemployment')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_empjob')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_empjob')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_emppaycomprecurring')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_emppaycomprecurring')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_empworkpermit')]",
				"[concat(variables('factoryId'), '/pipelines/broze_prata_sap_sf_empworkpermit')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_focompany')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_focompany')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_fodepartment')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_fodepartment')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_fopaycomponent')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_fopaycomponent')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_pernationalid')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pernationalid')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_perperson')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_perperson')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_perpersonal')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_perpersonal')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_picklist_contract_type')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pl_contract_type')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_picklist_employee_class')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pl_employee_class')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_picklist_employment_relationship')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pl_employment_relationship')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_picklist_employment_type')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pl_employment_type')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_picklist_state_bra')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pl_state_bra')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_pwbi01o')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pwbi01o')]",
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_sf_pwbi04')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_sf_pwbi04')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_prata_sap_ecc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest_sap_ecc_ekko",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ingest_sap_ecc_ekko",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tipo_carga": {
									"value": "@pipeline().parameters.tipo_carga",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "bronze_prata_sap_ecc_ekko",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest_sap_ecc_ekko",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "bronze_prata_sap_ecc_ekko",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "00_WORKFLOW/INGESTAO_PRATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T23:42:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_sap_ecc_ekko')]",
				"[concat(variables('factoryId'), '/pipelines/bronze_prata_sap_ecc_ekko')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_ecc_ekko')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromSapEccFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OracleSapEcc",
											"type": "DatasetReference",
											"parameters": {
												"schema": "SAPSR3",
												"table": "EKKO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/sap_ecc/ekko",
												"arquivo": {
													"value": "@concat('ekko__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromSapEccIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": "SELECT \n\t* \nFROM SAPSR3.EKKO \nWHERE AEDAT >= TO_CHAR(CURRENT_TIMESTAMP AT TIME ZONE 'UTC' - INTERVAL '1' DAY , 'YYYYMMDD')",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OracleSapEcc",
											"type": "DatasetReference",
											"parameters": {
												"schema": "SAPSR3",
												"table": "EKKO"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/sap_ecc/ekko",
												"arquivo": {
													"value": "@concat('ekko__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_ECC"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T20:39:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleSapEcc')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_empcompensation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEmpCompensation",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['seqNumber']"
										},
										"sink": {
											"name": "seqNumber"
										}
									},
									{
										"source": {
											"path": "[['userId']"
										},
										"sink": {
											"name": "userId"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['effectiveLatestChange']"
										},
										"sink": {
											"name": "effectiveLatestChange"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['eventReason']"
										},
										"sink": {
											"name": "eventReason"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['payGroup']"
										},
										"sink": {
											"name": "payGroup"
										}
									},
									{
										"source": {
											"path": "[['customString1']"
										},
										"sink": {
											"name": "customString1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['event']"
										},
										"sink": {
											"name": "event"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "EmpCompensation",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/emp_compensation/",
									"file": {
										"value": "@concat('emp_compensation__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_empemployment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEmpEmployement",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['personIdExternal']"
										},
										"sink": {
											"name": "personIdExternal"
										}
									},
									{
										"source": {
											"path": "[['userId']"
										},
										"sink": {
											"name": "userId"
										}
									},
									{
										"source": {
											"path": "[['hiringNotCompleted']"
										},
										"sink": {
											"name": "hiringNotCompleted"
										}
									},
									{
										"source": {
											"path": "[['isECRecord']"
										},
										"sink": {
											"name": "isECRecord"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['bonusPayExpirationDate']"
										},
										"sink": {
											"name": "bonusPayExpirationDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['employmentId']"
										},
										"sink": {
											"name": "employmentId"
										}
									},
									{
										"source": {
											"path": "[['isContingentWorker']"
										},
										"sink": {
											"name": "isContingentWorker"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['customLong10']"
										},
										"sink": {
											"name": "customLong10",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['originalStartDate']"
										},
										"sink": {
											"name": "originalStartDate"
										}
									},
									{
										"source": {
											"path": "[['benefitsEndDate']"
										},
										"sink": {
											"name": "benefitsEndDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['assignmentClass']"
										},
										"sink": {
											"name": "assignmentClass"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['okToRehire']"
										},
										"sink": {
											"name": "okToRehire",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['assignmentIdExternal']"
										},
										"sink": {
											"name": "assignmentIdExternal"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "EmpEmployment",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/emp_employment/",
									"file": {
										"value": "@concat('emp_employment__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_empjob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEmpJob",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['seqNumber']"
										},
										"sink": {
											"name": "seqNumber"
										}
									},
									{
										"source": {
											"path": "[['userId']"
										},
										"sink": {
											"name": "userId"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['fgtsOptant']"
										},
										"sink": {
											"name": "fgtsOptant"
										}
									},
									{
										"source": {
											"path": "[['commitmentIndicator']"
										},
										"sink": {
											"name": "commitmentIndicator",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['effectiveLatestChange']"
										},
										"sink": {
											"name": "effectiveLatestChange",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['validFrom']"
										},
										"sink": {
											"name": "validFrom",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fgtsDate']"
										},
										"sink": {
											"name": "fgtsDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['probationaryPeriodMeasure']"
										},
										"sink": {
											"name": "probationaryPeriodMeasure",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['occupationCri']"
										},
										"sink": {
											"name": "occupationCri",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fromCurrency']"
										},
										"sink": {
											"name": "fromCurrency",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['eeo5JobCategory']"
										},
										"sink": {
											"name": "eeo5JobCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['costCenter']"
										},
										"sink": {
											"name": "costCenter",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['sickPaySupplementMeasure']"
										},
										"sink": {
											"name": "sickPaySupplementMeasure",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['calcMethodIndicator']"
										},
										"sink": {
											"name": "calcMethodIndicator",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['exclExecutiveSector']"
										},
										"sink": {
											"name": "exclExecutiveSector",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isFulltimeEmployee']"
										},
										"sink": {
											"name": "isFulltimeEmployee",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['emplStatus']"
										},
										"sink": {
											"name": "emplStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['countryOfCompany']"
										},
										"sink": {
											"name": "countryOfCompany",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['eeo6JobCategory']"
										},
										"sink": {
											"name": "eeo6JobCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['municipalInseeCode']"
										},
										"sink": {
											"name": "municipalInseeCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['localJobTitle']"
										},
										"sink": {
											"name": "localJobTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['dismissalsNoticePeriodForEmployer']"
										},
										"sink": {
											"name": "dismissalsNoticePeriodForEmployer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['entryIntoGroup']"
										},
										"sink": {
											"name": "entryIntoGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['payGrade']"
										},
										"sink": {
											"name": "payGrade",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['travelDistance']"
										},
										"sink": {
											"name": "travelDistance",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['timeRecordingVariant']"
										},
										"sink": {
											"name": "timeRecordingVariant",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['calculationBase']"
										},
										"sink": {
											"name": "calculationBase",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString18']"
										},
										"sink": {
											"name": "customString18",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['assedicCertObjectNum']"
										},
										"sink": {
											"name": "assedicCertObjectNum",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['degreeOfProductivity']"
										},
										"sink": {
											"name": "degreeOfProductivity",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['assessmentStatus']"
										},
										"sink": {
											"name": "assessmentStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['managerId']"
										},
										"sink": {
											"name": "managerId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['spclRuleNonManualWorker']"
										},
										"sink": {
											"name": "spclRuleNonManualWorker",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['wtdHoursLimit']"
										},
										"sink": {
											"name": "wtdHoursLimit",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['mandatoryInternship']"
										},
										"sink": {
											"name": "mandatoryInternship",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['harmfulAgentExposure']"
										},
										"sink": {
											"name": "harmfulAgentExposure",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['sickPaySupplement']"
										},
										"sink": {
											"name": "sickPaySupplement",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['integrationAgent']"
										},
										"sink": {
											"name": "integrationAgent",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['exchangeRate']"
										},
										"sink": {
											"name": "exchangeRate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workPermitExpiry']"
										},
										"sink": {
											"name": "workPermitExpiry",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['initialEntryDate']"
										},
										"sink": {
											"name": "initialEntryDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['currentWageLevel']"
										},
										"sink": {
											"name": "currentWageLevel",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['holidayCalendarCode']"
										},
										"sink": {
											"name": "holidayCalendarCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['contractNumber']"
										},
										"sink": {
											"name": "contractNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['jobGroup']"
										},
										"sink": {
											"name": "jobGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['eventReason']"
										},
										"sink": {
											"name": "eventReason",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isCompetitionClauseActive']"
										},
										"sink": {
											"name": "isCompetitionClauseActive",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['noticePeriod']"
										},
										"sink": {
											"name": "noticePeriod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['continuedSicknessPayMeasure']"
										},
										"sink": {
											"name": "continuedSicknessPayMeasure",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['toCurrency']"
										},
										"sink": {
											"name": "toCurrency",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['newCalcAvgPpu']"
										},
										"sink": {
											"name": "newCalcAvgPpu",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['regularTemp']"
										},
										"sink": {
											"name": "regularTemp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workLocation']"
										},
										"sink": {
											"name": "workLocation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['contractReferenceForAed']"
										},
										"sink": {
											"name": "contractReferenceForAed",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['isSideLineJobAllowed']"
										},
										"sink": {
											"name": "isSideLineJobAllowed",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['company']"
										},
										"sink": {
											"name": "company",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['retired']"
										},
										"sink": {
											"name": "retired",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['eeo1JobCategory']"
										},
										"sink": {
											"name": "eeo1JobCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['periodIndicator']"
										},
										"sink": {
											"name": "periodIndicator",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['employeeClass']"
										},
										"sink": {
											"name": "employeeClass",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['hireDate']"
										},
										"sink": {
											"name": "hireDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['contractEndDate']"
										},
										"sink": {
											"name": "contractEndDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['pensionProtection']"
										},
										"sink": {
											"name": "pensionProtection",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['employeeWorkgroupMembership']"
										},
										"sink": {
											"name": "employeeWorkgroupMembership",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['sickPaySupplementPeriod']"
										},
										"sink": {
											"name": "sickPaySupplementPeriod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['transportationSubsidy']"
										},
										"sink": {
											"name": "transportationSubsidy",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['contractId']"
										},
										"sink": {
											"name": "contractId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['location']"
										},
										"sink": {
											"name": "location",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['occupationalLevels']"
										},
										"sink": {
											"name": "occupationalLevels",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workscheduleCode']"
										},
										"sink": {
											"name": "workscheduleCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['contractType']"
										},
										"sink": {
											"name": "contractType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['jobCode']"
										},
										"sink": {
											"name": "jobCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['payScaleLevel']"
										},
										"sink": {
											"name": "payScaleLevel",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['timeTypeProfileCode']"
										},
										"sink": {
											"name": "timeTypeProfileCode",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['eeoClass']"
										},
										"sink": {
											"name": "eeoClass",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['newCalcAvgDnp']"
										},
										"sink": {
											"name": "newCalcAvgDnp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['hazard']"
										},
										"sink": {
											"name": "hazard",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['continuedSicknessPayPeriod']"
										},
										"sink": {
											"name": "continuedSicknessPayPeriod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['flsaStatus']"
										},
										"sink": {
											"name": "flsaStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['occupationalLevelKen']"
										},
										"sink": {
											"name": "occupationalLevelKen",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['educationalEntity']"
										},
										"sink": {
											"name": "educationalEntity",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['corporation']"
										},
										"sink": {
											"name": "corporation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['residentVote']"
										},
										"sink": {
											"name": "residentVote",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['laborProtection']"
										},
										"sink": {
											"name": "laborProtection",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['ineligibleStatutoryMinWage']"
										},
										"sink": {
											"name": "ineligibleStatutoryMinWage",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['guaranteedPayment']"
										},
										"sink": {
											"name": "guaranteedPayment",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['occupationGtm']"
										},
										"sink": {
											"name": "occupationGtm",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['occupationPer']"
										},
										"sink": {
											"name": "occupationPer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['payScaleType']"
										},
										"sink": {
											"name": "payScaleType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['creditForPreviousService']"
										},
										"sink": {
											"name": "creditForPreviousService",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['healthRisk']"
										},
										"sink": {
											"name": "healthRisk",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fte']"
										},
										"sink": {
											"name": "fte",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['event']"
										},
										"sink": {
											"name": "event",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['teachersPension']"
										},
										"sink": {
											"name": "teachersPension",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workerCategory']"
										},
										"sink": {
											"name": "workerCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['contractDate']"
										},
										"sink": {
											"name": "contractDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['jobTitle']"
										},
										"sink": {
											"name": "jobTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['probationaryPeriod']"
										},
										"sink": {
											"name": "probationaryPeriod",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['electoralCollegeForWorksCouncil']"
										},
										"sink": {
											"name": "electoralCollegeForWorksCouncil",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['codeOfJobForEldp']"
										},
										"sink": {
											"name": "codeOfJobForEldp",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['familyRelationshipWithEmployer']"
										},
										"sink": {
											"name": "familyRelationshipWithEmployer",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['internshipLevel']"
										},
										"sink": {
											"name": "internshipLevel",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['empRelationship']"
										},
										"sink": {
											"name": "empRelationship",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['standardHours']"
										},
										"sink": {
											"name": "standardHours",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['electoralCollegeForWorkersRepresentatives']"
										},
										"sink": {
											"name": "electoralCollegeForWorkersRepresentatives",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['eeo4JobCategory']"
										},
										"sink": {
											"name": "eeo4JobCategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['internshipSchool']"
										},
										"sink": {
											"name": "internshipSchool",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['assedicCertInitialStateNum']"
										},
										"sink": {
											"name": "assedicCertInitialStateNum",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['includedChallengedPersonQuota']"
										},
										"sink": {
											"name": "includedChallengedPersonQuota",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['fgtsPercent']"
										},
										"sink": {
											"name": "fgtsPercent",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['position']"
										},
										"sink": {
											"name": "position",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['payScaleArea']"
										},
										"sink": {
											"name": "payScaleArea",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['probationPeriodEndDate']"
										},
										"sink": {
											"name": "probationPeriodEndDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workingDaysPerWeek']"
										},
										"sink": {
											"name": "workingDaysPerWeek",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['department']"
										},
										"sink": {
											"name": "department",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['workingTimeDirective']"
										},
										"sink": {
											"name": "workingTimeDirective",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['employmentType']"
										},
										"sink": {
											"name": "employmentType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString5']"
										},
										"sink": {
											"name": "customString5",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString4']"
										},
										"sink": {
											"name": "customString4",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString3']"
										},
										"sink": {
											"name": "customString3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString2']"
										},
										"sink": {
											"name": "customString2",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString9']"
										},
										"sink": {
											"name": "customString9",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['tupeOrgNumber']"
										},
										"sink": {
											"name": "tupeOrgNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString8']"
										},
										"sink": {
											"name": "customString8",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString7']"
										},
										"sink": {
											"name": "customString7",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString6']"
										},
										"sink": {
											"name": "customString6",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['payScaleGroup']"
										},
										"sink": {
											"name": "payScaleGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['paymentInLieuOfNotice']"
										},
										"sink": {
											"name": "paymentInLieuOfNotice",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "EmpJob",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/emp_job",
									"file": {
										"value": "@concat('emp_job__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_emppaycomprecurring')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEmpPayCompRecurring",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['payComponent']"
										},
										"sink": {
											"name": "payComponent"
										}
									},
									{
										"source": {
											"path": "[['seqNumber']"
										},
										"sink": {
											"name": "seqNumber"
										}
									},
									{
										"source": {
											"path": "[['userId']"
										},
										"sink": {
											"name": "userId"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['notes']"
										},
										"sink": {
											"name": "notes",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['effectiveLatestChange']"
										},
										"sink": {
											"name": "effectiveLatestChange"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['frequency']"
										},
										"sink": {
											"name": "frequency"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['paycompvalue']"
										},
										"sink": {
											"name": "paycompvalue"
										}
									},
									{
										"source": {
											"path": "[['currencyCode']"
										},
										"sink": {
											"name": "currencyCode"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "EmpPayCompRecurring",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/emp_pay_comp_recurring/",
									"file": {
										"value": "@concat('emp_pay_comp_recurring__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_empworkpermit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEmpWorkPermit",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['country']"
										},
										"sink": {
											"name": "country"
										}
									},
									{
										"source": {
											"path": "[['documentType']"
										},
										"sink": {
											"name": "documentType"
										}
									},
									{
										"source": {
											"path": "[['documentNumber']"
										},
										"sink": {
											"name": "documentNumber"
										}
									},
									{
										"source": {
											"path": "[['issueDate']"
										},
										"sink": {
											"name": "issueDate"
										}
									},
									{
										"source": {
											"path": "[['userId']"
										},
										"sink": {
											"name": "userId"
										}
									},
									{
										"source": {
											"path": "[['attachmentFileName']"
										},
										"sink": {
											"name": "attachmentFileName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['notes']"
										},
										"sink": {
											"name": "notes",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['attachmentStatus']"
										},
										"sink": {
											"name": "attachmentStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['attachmentFileSize']"
										},
										"sink": {
											"name": "attachmentFileSize",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['issuingAuthority']"
										},
										"sink": {
											"name": "issuingAuthority",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['attachment']"
										},
										"sink": {
											"name": "attachment",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString1']"
										},
										"sink": {
											"name": "customString1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['attachmentFileType']"
										},
										"sink": {
											"name": "attachmentFileType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['attachmentMimeType']"
										},
										"sink": {
											"name": "attachmentMimeType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['attachmentId']"
										},
										"sink": {
											"name": "attachmentId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['issuePlace']"
										},
										"sink": {
											"name": "issuePlace"
										}
									},
									{
										"source": {
											"path": "[['expirationDate']"
										},
										"sink": {
											"name": "expirationDate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "EmpWorkPermit",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/emp_work_permit/",
									"file": {
										"value": "@concat('emp_work_permit__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_focompany')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromFOCompany",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['country']"
										},
										"sink": {
											"name": "country"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['name_localized']"
										},
										"sink": {
											"name": "name_localized"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate"
										}
									},
									{
										"source": {
											"path": "[['cust_CNPJ']"
										},
										"sink": {
											"name": "cust_CNPJ"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['description_pt_BR']"
										},
										"sink": {
											"name": "description_pt_BR",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name_pt_BR']"
										},
										"sink": {
											"name": "name_pt_BR"
										}
									},
									{
										"source": {
											"path": "[['cust_CNAE']"
										},
										"sink": {
											"name": "cust_CNAE"
										}
									},
									{
										"source": {
											"path": "[['standardHours']"
										},
										"sink": {
											"name": "standardHours"
										}
									},
									{
										"source": {
											"path": "[['description_defaultValue']"
										},
										"sink": {
											"name": "description_defaultValue",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['description_en_US']"
										},
										"sink": {
											"name": "description_en_US",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['entityOID']"
										},
										"sink": {
											"name": "entityOID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['description_en_DEBUG']"
										},
										"sink": {
											"name": "description_en_DEBUG",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"name": "status"
										}
									},
									{
										"source": {
											"path": "[['description']"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name_en_DEBUG']"
										},
										"sink": {
											"name": "name_en_DEBUG",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['name_en_US']"
										},
										"sink": {
											"name": "name_en_US"
										}
									},
									{
										"source": {
											"path": "[['currency']"
										},
										"sink": {
											"name": "currency"
										}
									},
									{
										"source": {
											"path": "[['name_defaultValue']"
										},
										"sink": {
											"name": "name_defaultValue"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['defaultPayGroup']"
										},
										"sink": {
											"name": "defaultPayGroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['cust_GrauRisco']"
										},
										"sink": {
											"name": "cust_GrauRisco"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['mdfSystemRecordId']"
										},
										"sink": {
											"name": "mdfSystemRecordId"
										}
									},
									{
										"source": {
											"path": "[['description_localized']"
										},
										"sink": {
											"name": "description_localized",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['defaultLocation']"
										},
										"sink": {
											"name": "defaultLocation",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['nameTranslationTextNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['nameTranslationTextNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['createdByNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['createdByNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['defaultLocationNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['defaultLocationNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['localNavARG']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['localNavARG___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['currencyNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['currencyNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toLegalEntityARG']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toLegalEntityARG___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['descriptionTranslationTextNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['descriptionTranslationTextNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['statusNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['statusNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['descriptionTranslationNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['descriptionTranslationNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toNameFormat']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toNameFormat___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['localNavESP']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['localNavESP___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['localNavUSA']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['localNavUSA___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['localNavDEU']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['localNavDEU___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['localNavFRA']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['localNavFRA___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedByNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['lastModifiedByNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toLegalEntityRUS']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toLegalEntityRUS___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toLegalEntityUSA']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toLegalEntityUSA___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toLegalEntityESP']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toLegalEntityESP___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toDisplayNameFormat']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toDisplayNameFormat___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['nameTranslationNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['nameTranslationNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['localNavDEFLT']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['localNavDEFLT___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['countryNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['countryNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['defaultPayGroupNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['defaultPayGroupNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toLegalEntityFRA']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toLegalEntityFRA___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['countryOfRegistrationNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['countryOfRegistrationNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['toLegalEntityDEU']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['toLegalEntityDEU___deferred_uri"
										}
									}
								],
								"collectionReference": "$['d']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "FOCompany",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/fo_company/",
									"file": {
										"value": "@concat('fo_company__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_fodepartment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromFODepartment",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['parent']"
										},
										"sink": {
											"name": "parent"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['name_localized']"
										},
										"sink": {
											"name": "name_localized"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate"
										}
									},
									{
										"source": {
											"path": "[['entityUUID']"
										},
										"sink": {
											"name": "entityUUID"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['description_pt_BR']"
										},
										"sink": {
											"name": "description_pt_BR"
										}
									},
									{
										"source": {
											"path": "[['name_pt_BR']"
										},
										"sink": {
											"name": "name_pt_BR"
										}
									},
									{
										"source": {
											"path": "[['costCenter']"
										},
										"sink": {
											"name": "costCenter"
										}
									},
									{
										"source": {
											"path": "[['description_defaultValue']"
										},
										"sink": {
											"name": "description_defaultValue"
										}
									},
									{
										"source": {
											"path": "[['cust_Nivel']"
										},
										"sink": {
											"name": "cust_Nivel",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['description_en_US']"
										},
										"sink": {
											"name": "description_en_US"
										}
									},
									{
										"source": {
											"path": "[['description_en_DEBUG']"
										},
										"sink": {
											"name": "description_en_DEBUG",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"name": "status"
										}
									},
									{
										"source": {
											"path": "[['description']"
										},
										"sink": {
											"name": "description"
										}
									},
									{
										"source": {
											"path": "[['name_en_DEBUG']"
										},
										"sink": {
											"name": "name_en_DEBUG",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['headOfUnit']"
										},
										"sink": {
											"name": "headOfUnit",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['name_en_US']"
										},
										"sink": {
											"name": "name_en_US"
										}
									},
									{
										"source": {
											"path": "[['name_defaultValue']"
										},
										"sink": {
											"name": "name_defaultValue"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['mdfSystemRecordId']"
										},
										"sink": {
											"name": "mdfSystemRecordId"
										}
									},
									{
										"source": {
											"path": "[['description_localized']"
										},
										"sink": {
											"name": "description_localized"
										}
									}
								],
								"collectionReference": "$['d']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "FODepartment",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/fo_department/",
									"file": {
										"value": "@concat('fo_department__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_fopaycomponent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromFOPayComponent",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['payComponentValue']"
										},
										"sink": {
											"name": "payComponentValue",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate"
										}
									},
									{
										"source": {
											"path": "[['isEarning']"
										},
										"sink": {
											"name": "isEarning"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['description']"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['basePayComponentGroup']"
										},
										"sink": {
											"name": "basePayComponentGroup"
										}
									},
									{
										"source": {
											"path": "[['frequencyCode']"
										},
										"sink": {
											"name": "frequencyCode"
										}
									},
									{
										"source": {
											"path": "[['number']"
										},
										"sink": {
											"name": "number",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['payComponentType']"
										},
										"sink": {
											"name": "payComponentType"
										}
									},
									{
										"source": {
											"path": "[['rate']"
										},
										"sink": {
											"name": "rate",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['maxFractionDigits']"
										},
										"sink": {
											"name": "maxFractionDigits",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['currency']"
										},
										"sink": {
											"name": "currency"
										}
									},
									{
										"source": {
											"path": "[['isEndDatedPayment']"
										},
										"sink": {
											"name": "isEndDatedPayment"
										}
									},
									{
										"source": {
											"path": "[['objectId']"
										},
										"sink": {
											"name": "objectId"
										}
									},
									{
										"source": {
											"path": "[['canOverride']"
										},
										"sink": {
											"name": "canOverride"
										}
									},
									{
										"source": {
											"path": "[['displayOnSelfService']"
										},
										"sink": {
											"name": "displayOnSelfService"
										}
									},
									{
										"source": {
											"path": "[['unitOfMeasure']"
										},
										"sink": {
											"name": "unitOfMeasure",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['selfServiceDescription']"
										},
										"sink": {
											"name": "selfServiceDescription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['recurring']"
										},
										"sink": {
											"name": "recurring"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['target']"
										},
										"sink": {
											"name": "target"
										}
									},
									{
										"source": {
											"path": "[['taxTreatment']"
										},
										"sink": {
											"name": "taxTreatment",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['usedForCompPlanning']"
										},
										"sink": {
											"name": "usedForCompPlanning"
										}
									},
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['internalCode']"
										},
										"sink": {
											"name": "internalCode"
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"name": "status"
										}
									}
								],
								"collectionReference": "$['d']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "FOPayComponent",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/fo_pay_component/",
									"file": {
										"value": "@concat('fo_pay_component__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_pernationalid')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPerNationalId",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['country']"
										},
										"sink": {
											"name": "country",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['personIdExternal']"
										},
										"sink": {
											"name": "personIdExternal",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['cardType']"
										},
										"sink": {
											"name": "cardType",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['notes']"
										},
										"sink": {
											"name": "notes",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['nationalId']"
										},
										"sink": {
											"name": "nationalId"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['isPrimary']"
										},
										"sink": {
											"name": "isPrimary"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['personNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['personNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "[['countryNav']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['countryNav___deferred_uri"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "PerNationalId",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/per_national_id/",
									"file": {
										"value": "@concat('per_national_id__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_perperson')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPerPerson",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['personIdExternal']"
										},
										"sink": {
											"name": "personIdExternal"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['countryOfBirth']"
										},
										"sink": {
											"name": "countryOfBirth",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['placeOfBirth']"
										},
										"sink": {
											"name": "placeOfBirth",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['dateOfBirth']"
										},
										"sink": {
											"name": "dateOfBirth",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['perPersonUuid']"
										},
										"sink": {
											"name": "perPersonUuid"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "[['regionOfBirth']"
										},
										"sink": {
											"name": "regionOfBirth",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['personId']"
										},
										"sink": {
											"name": "personId"
										}
									},
									{
										"source": {
											"path": "[['homeAddressNavDEFLT']['__deferred']['uri']"
										},
										"sink": {
											"name": "d_results'][0]['homeAddressNavDEFLT___deferred_uri"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "PerPerson",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/per_person",
									"file": {
										"value": "@concat('per_person__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_perpersonal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPerPersonal",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['personIdExternal']"
										},
										"sink": {
											"name": "personIdExternal"
										}
									},
									{
										"source": {
											"path": "[['startDate']"
										},
										"sink": {
											"name": "startDate"
										}
									},
									{
										"source": {
											"path": "[['endDate']"
										},
										"sink": {
											"name": "endDate"
										}
									},
									{
										"source": {
											"path": "[['createdDateTime']"
										},
										"sink": {
											"name": "createdDateTime"
										}
									},
									{
										"source": {
											"path": "[['attachmentId']"
										},
										"sink": {
											"name": "attachmentId",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['preferredName']"
										},
										"sink": {
											"name": "preferredName",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['secondNationality']"
										},
										"sink": {
											"name": "secondNationality",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['nationality']"
										},
										"sink": {
											"name": "nationality"
										}
									},
									{
										"source": {
											"path": "[['thirdNationality']"
										},
										"sink": {
											"name": "thirdNationality",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['challengeStatus']"
										},
										"sink": {
											"name": "challengeStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastName']"
										},
										"sink": {
											"name": "lastName"
										}
									},
									{
										"source": {
											"path": "[['gender']"
										},
										"sink": {
											"name": "gender"
										}
									},
									{
										"source": {
											"path": "[['createdOn']"
										},
										"sink": {
											"name": "createdOn"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedOn']"
										},
										"sink": {
											"name": "lastModifiedOn"
										}
									},
									{
										"source": {
											"path": "[['nativePreferredLang']"
										},
										"sink": {
											"name": "nativePreferredLang",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedDateTime']"
										},
										"sink": {
											"name": "lastModifiedDateTime"
										}
									},
									{
										"source": {
											"path": "[['countryOfBirth']"
										},
										"sink": {
											"name": "countryOfBirth",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['firstName']"
										},
										"sink": {
											"name": "firstName"
										}
									},
									{
										"source": {
											"path": "[['salutation']"
										},
										"sink": {
											"name": "salutation"
										}
									},
									{
										"source": {
											"path": "[['maritalStatus']"
										},
										"sink": {
											"name": "maritalStatus"
										}
									},
									{
										"source": {
											"path": "[['since']"
										},
										"sink": {
											"name": "since",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['lastModifiedBy']"
										},
										"sink": {
											"name": "lastModifiedBy"
										}
									},
									{
										"source": {
											"path": "[['customString3']"
										},
										"sink": {
											"name": "customString3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['customString2']"
										},
										"sink": {
											"name": "customString2",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['createdBy']"
										},
										"sink": {
											"name": "createdBy"
										}
									},
									{
										"source": {
											"path": "$['d']['__next']"
										},
										"sink": {
											"name": "__next"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfFULL",
								"type": "DatasetReference",
								"parameters": {
									"table": "PerPersonal",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/per_personal",
									"file": {
										"value": "@concat('per_personal__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:39:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfFULL')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_picklist_contract_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPickilistContractType",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['picklistLabels']['results'][1]['label']"
										},
										"sink": {
											"name": "label"
										}
									}
								],
								"collectionReference": "$['d']['results'][0]['picklistOptions']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfPicklist",
								"type": "DatasetReference",
								"parameters": {
									"picklist": "contractType",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pl_contract_type/",
									"file": {
										"value": "@concat('pl_contract_type__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T19:14:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfPicklist')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_picklist_employee_class')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPickilistEmployeeClass",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['picklistLabels']['results'][1]['label']"
										},
										"sink": {
											"name": "label"
										}
									}
								],
								"collectionReference": "$['d']['results'][0]['picklistOptions']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfPicklist",
								"type": "DatasetReference",
								"parameters": {
									"picklist": "EMPLOYEECLASS",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pl_employee_class/",
									"file": {
										"value": "@concat('pl_employee_class__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T19:51:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfPicklist')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_picklist_employment_relationship')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPickilistEmploymentRelationship",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['picklistLabels']['results'][1]['label']"
										},
										"sink": {
											"name": "items"
										}
									}
								],
								"collectionReference": "$['d']['results'][0]['picklistOptions']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfPicklist",
								"type": "DatasetReference",
								"parameters": {
									"picklist": "employmentRelationship",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pl_employment_relationship/",
									"file": {
										"value": "@concat('pl_employment_relationship__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T19:34:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfPicklist')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_picklist_employment_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPicklistEmploymentType",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['picklistLabels']['results'][1]['label']"
										},
										"sink": {
											"name": "label"
										}
									}
								],
								"collectionReference": "$['d']['results'][0]['picklistOptions']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfPicklist",
								"type": "DatasetReference",
								"parameters": {
									"picklist": "employment_type",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pl_employment_type/",
									"file": {
										"value": "@concat('pl_employment_type__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T21:04:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfPicklist')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_picklist_state_bra')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPickilistStateBra",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id"
										}
									},
									{
										"source": {
											"path": "[['externalCode']"
										},
										"sink": {
											"name": "externalCode"
										}
									},
									{
										"source": {
											"path": "[['picklistLabels']['results'][1]['label']"
										},
										"sink": {
											"name": "label"
										}
									}
								],
								"collectionReference": "$['d']['results'][0]['picklistOptions']['results']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSfPicklist",
								"type": "DatasetReference",
								"parameters": {
									"picklist": "STATE_BRA",
									"format": "JSON"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pl_state_bra/",
									"file": {
										"value": "@concat('pl_state_bra__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T19:51:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSfPicklist')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_pwbi01o')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPWBI01O",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['ano']"
										},
										"sink": {
											"name": "ano"
										}
									},
									{
										"source": {
											"path": "[['periodo']"
										},
										"sink": {
											"name": "periodo"
										}
									},
									{
										"source": {
											"path": "[['quantiidade']"
										},
										"sink": {
											"name": "quantiidade"
										}
									},
									{
										"source": {
											"path": "[['descrRubrica']"
										},
										"sink": {
											"name": "descrRubrica"
										}
									},
									{
										"source": {
											"path": "[['descrFolha']"
										},
										"sink": {
											"name": "descrFolha"
										}
									},
									{
										"source": {
											"path": "[['contaContabil']"
										},
										"sink": {
											"name": "contaContabil"
										}
									},
									{
										"source": {
											"path": "[['rubrica']"
										},
										"sink": {
											"name": "rubrica"
										}
									},
									{
										"source": {
											"path": "[['indDebCred']"
										},
										"sink": {
											"name": "indDebCred"
										}
									},
									{
										"source": {
											"path": "[['matricula']"
										},
										"sink": {
											"name": "matricula"
										}
									},
									{
										"source": {
											"path": "[['empresa']"
										},
										"sink": {
											"name": "empresa"
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"name": "status"
										}
									},
									{
										"source": {
											"path": "[['codFolha']"
										},
										"sink": {
											"name": "codFolha"
										}
									},
									{
										"source": {
											"path": "[['montante']"
										},
										"sink": {
											"name": "montante"
										}
									}
								],
								"collectionReference": "$['employeePayments']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSFPWBI",
								"type": "DatasetReference",
								"parameters": {
									"pbi": "PWBI01O",
									"date": "202309",
									"operator": "eq",
									"variable": "periodo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pwbi01o/",
									"file": {
										"value": "@concat('pwbi01o__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:29:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSFPWBI')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sap_sf_pwbi04')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromPWBI04",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.d.__next"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['nome']"
										},
										"sink": {
											"name": "nome"
										}
									},
									{
										"source": {
											"path": "[['matricula']"
										},
										"sink": {
											"name": "matricula"
										}
									},
									{
										"source": {
											"path": "[['descrOcorrencia']"
										},
										"sink": {
											"name": "descrOcorrencia"
										}
									},
									{
										"source": {
											"path": "[['empresa']"
										},
										"sink": {
											"name": "empresa"
										}
									},
									{
										"source": {
											"path": "[['periodo']"
										},
										"sink": {
											"name": "periodo"
										}
									},
									{
										"source": {
											"path": "[['status']"
										},
										"sink": {
											"name": "status"
										}
									},
									{
										"source": {
											"path": "[['cpf']"
										},
										"sink": {
											"name": "cpf"
										}
									},
									{
										"source": {
											"path": "[['codOcorrencia']"
										},
										"sink": {
											"name": "codOcorrencia"
										}
									},
									{
										"source": {
											"path": "[['dataInicio']"
										},
										"sink": {
											"name": "dataInicio"
										}
									},
									{
										"source": {
											"path": "[['dataFim']"
										},
										"sink": {
											"name": "dataFim"
										}
									}
								],
								"collectionReference": "$['d']['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestSapSFPWBI04",
								"type": "DatasetReference",
								"parameters": {
									"date": "202302",
									"pbi": "PWBI04",
									"operator": "eq",
									"variable": "periodo"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet",
								"type": "DatasetReference",
								"parameters": {
									"path": "camada_bronze/sap_sf/pwbi04/",
									"file": {
										"value": "@concat('pwbi04__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))\n\n",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/SAP_SF"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T16:29:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestSapSFPWBI04')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_catarata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR Catarata para camada bronze",
				"activities": [
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tabelasSGR')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_CATARATA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_pasta') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_pasta'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Definir pasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_catarata",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_pasta')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Definir pasta",
									"description": "Corrige o nome da pasta referente à tabela",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_pasta",
										"value": {
											"value": "@concat( 'dbo.', split(variables('nome_tabela'), '.')[1])",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "SetarTabelas",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabelasSGR",
							"value": [
								"SGRCCO.ATIVID",
								"SGRCCO.CAUSAS",
								"SGRCCO.CONMET",
								"SGRCCO.CTRVIA",
								"SGRCCO.FUNCIO",
								"SGRCCO.GRAVID",
								"SGRCCO.GRUNAT",
								"SGRCCO.MODVEI",
								"SGRCCO.NATURE",
								"SGRCCO.OCORRE",
								"SGRCCO.OCOVEI",
								"SGRCCO.OCOVIA",
								"SGRCCO.OCOVIT",
								"SGRCCO.ORIGEM",
								"SGRCCO.SENTID",
								"SGRCCO.TIPATE",
								"SGRCCO.TIPVEI",
								"SGRCCO.TIPVIA",
								"SGRCCO.TIPVIT",
								"SGRCCO.VEIVIA",
								"SGRCCO.VIATUR",
								"SGRCCO.VITAMB"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelasSGR": {
						"type": "Array"
					},
					"nome_pasta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/CATARATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-18T14:09:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_CATARATA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_catarata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas doSGR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ATIVID'\n\t\t\t\t\t, 'CAUSAS'\n\t\t\t\t\t, 'CONMET'\n\t\t\t\t\t, 'CTRVIA'\n\t\t\t\t\t, 'FUNCIO'\n\t\t\t\t\t, 'GRAVID'\n\t\t\t\t\t, 'GRUNAT'\n\t\t\t\t\t, 'MODVEI'\n\t\t\t\t\t, 'NATURE'\n\t\t\t\t\t, 'OCORRE'\n\t\t\t\t\t, 'OCOVEI'\n\t\t\t\t\t, 'OCOVIA'\n\t\t\t\t\t, 'OCOVIT'\n\t\t\t\t\t, 'ORIGEM'\n\t\t\t\t\t, 'SENTID'\n\t\t\t\t\t, 'TIPATE'\n\t\t\t\t\t, 'TIPVEI'\n\t\t\t\t\t, 'TIPVIA'\n\t\t\t\t\t, 'TIPVIT'\n\t\t\t\t\t, 'VEIVIA'\n\t\t\t\t\t, 'VIATUR'\n\t\t\t\t\t, 'VITAMB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_SGR_E101",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "SGR/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T18:52:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_e101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ATIVID'\n\t\t\t\t\t, 'CAUSAS'\n\t\t\t\t\t, 'CONMET'\n\t\t\t\t\t, 'CTRVIA'\n\t\t\t\t\t, 'FUNCIO'\n\t\t\t\t\t, 'GRAVID'\n\t\t\t\t\t, 'GRUNAT'\n\t\t\t\t\t, 'MODVEI'\n\t\t\t\t\t, 'NATURE'\n\t\t\t\t\t, 'OCORRE'\n\t\t\t\t\t, 'OCOVEI'\n\t\t\t\t\t, 'OCOVIA'\n\t\t\t\t\t, 'OCOVIT'\n\t\t\t\t\t, 'ORIGEM'\n\t\t\t\t\t, 'SENTID'\n\t\t\t\t\t, 'TIPATE'\n\t\t\t\t\t, 'TIPVEI'\n\t\t\t\t\t, 'TIPVIA'\n\t\t\t\t\t, 'TIPVIT'\n\t\t\t\t\t, 'VEIVIA'\n\t\t\t\t\t, 'VIATUR'\n\t\t\t\t\t, 'VITAMB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_SGR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "SGR/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T18:53:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_E135')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_e135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_ecopara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da EcoParana para camada bronze",
				"activities": [
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tabelasSGR')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_ECOPARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_pasta') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_pasta'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Definir pasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_ecopara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_pasta')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Definir pasta",
									"description": "Corrige o nome da pasta referente à tabela",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_pasta",
										"value": {
											"value": "@concat( 'dbo.', split(variables('nome_tabela'), '.')[1])",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "SetarTabelas",
						"description": "[[\"SGRCCO.ATIVID\",\"SGRCCO.CAUSAS\",\"SGRCCO.CONMET\",\"SGRCCO.CTRVIA\",\"SGRCCO.FUNCIO\",\"SGRCCO.GRAVID\",\"SGRCCO.GRUNAT\",\"SGRCCO.MODVEI\",\"SGRCCO.NATURE\",\"SGRCCO.OCORRE\",\"SGRCCO.OCOVEI\",\"SGRCCO.OCOVIA\",\"SGRCCO.OCOVIT\",\"SGRCCO.ORIGEM\",\"SGRCCO.SENTID\",\"SGRCCO.TIPATE\",\"SGRCCO.TIPVEI\",\"SGRCCO.TIPVIA\",\"SGRCCO.TIPVIT\",\"SGRCCO.VEIVIA\",\"SGRCCO.VIATUR\",\"SGRCCO.VITAMB\"]",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabelasSGR",
							"value": [
								"SGRCCO.ATIVID",
								"SGRCCO.CAUSAS",
								"SGRCCO.CONMET",
								"SGRCCO.CTRVIA",
								"SGRCCO.FUNCIO",
								"SGRCCO.GRAVID",
								"SGRCCO.GRUNAT",
								"SGRCCO.MODVEI",
								"SGRCCO.NATURE",
								"SGRCCO.OCORRE",
								"SGRCCO.OCOVEI",
								"SGRCCO.OCOVIA",
								"SGRCCO.OCOVIT",
								"SGRCCO.ORIGEM",
								"SGRCCO.SENTID",
								"SGRCCO.TIPATE",
								"SGRCCO.TIPVEI",
								"SGRCCO.TIPVIA",
								"SGRCCO.TIPVIT",
								"SGRCCO.VEIVIA",
								"SGRCCO.VIATUR",
								"SGRCCO.VITAMB"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelasSGR": {
						"type": "Array"
					},
					"nome_pasta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/ECOPARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T18:44:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_ECOPARA')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_ecopara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_ecosul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da EcoSul para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ATIVID'\n\t\t\t\t\t, 'CAUSAS'\n\t\t\t\t\t, 'CONMET'\n\t\t\t\t\t, 'CTRVIA'\n\t\t\t\t\t, 'FUNCIO'\n\t\t\t\t\t, 'GRAVID'\n\t\t\t\t\t, 'GRUNAT'\n\t\t\t\t\t, 'MODVEI'\n\t\t\t\t\t, 'NATURE'\n\t\t\t\t\t, 'OCORRE'\n\t\t\t\t\t, 'OCOVEI'\n\t\t\t\t\t, 'OCOVIA'\n\t\t\t\t\t, 'OCOVIT'\n\t\t\t\t\t, 'ORIGEM'\n\t\t\t\t\t, 'SENTID'\n\t\t\t\t\t, 'TIPATE'\n\t\t\t\t\t, 'TIPVEI'\n\t\t\t\t\t, 'TIPVIA'\n\t\t\t\t\t, 'TIPVIT'\n\t\t\t\t\t, 'VEIVIA'\n\t\t\t\t\t, 'VIATUR'\n\t\t\t\t\t, 'VITAMB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_SGR_ECOSUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "X",
									"table": "X"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_ECOSUL",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_ecosul",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelasSGR": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "SGR/ECOSUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T18:55:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_ECOSUL')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_ecosul')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tabelasSGR')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_EPST",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_epst",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "SetarTabelas",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabelasSGR",
							"value": [
								"dbo.ATIVID",
								"dbo.CAUSAS",
								"dbo.CONMET",
								"dbo.CTRVIA",
								"dbo.FUNCIO",
								"dbo.GRAVID",
								"dbo.GRUNAT",
								"dbo.MODVEI",
								"dbo.NATURE",
								"dbo.OCORRE",
								"dbo.OCOVEI",
								"dbo.OCOVIA",
								"dbo.OCOVIT",
								"dbo.ORIGEM",
								"dbo.SENTID",
								"dbo.TIPATE",
								"dbo.TIPVEI",
								"dbo.TIPVIA",
								"dbo.TIPVIT",
								"dbo.VEIVIA",
								"dbo.VIATUR",
								"dbo.VITAMB"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelasSGR": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "SGR/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T18:56:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_EPST')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_epst')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da Ecovias para camada bronze",
				"activities": [
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tabelas')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "ACAUA",
												"table": {
													"value": "@variables('nome_tabela')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_pasta') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_pasta'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Definir pasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_pasta')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Definir pasta",
									"description": "Corrige o nome da pasta referente à tabela",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_pasta",
										"value": {
											"value": "@concat( 'dbo.', split(variables('nome_tabela'), '.')[1])",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "SetarTabelas",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabelas",
							"value": [
								"ACAUA.ATIVID",
								"ACAUA.CAUSAS",
								"ACAUA.CONMET",
								"ACAUA.CTRVIA",
								"ACAUA.FUNCIO",
								"ACAUA.GRAVID",
								"ACAUA.GRUNAT",
								"ACAUA.MODVEI",
								"ACAUA.NATURE",
								"ACAUA.OCORRE",
								"ACAUA.OCOVEI",
								"ACAUA.OCOVIA",
								"ACAUA.OCOVIT",
								"ACAUA.ORIGEM",
								"ACAUA.SENTID",
								"ACAUA.TIPATE",
								"ACAUA.TIPVEI",
								"ACAUA.TIPVIA",
								"ACAUA.TIPVIT",
								"ACAUA.VEIVIA",
								"ACAUA.VIATUR",
								"ACAUA.VITAMB"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelas": {
						"type": "Array"
					},
					"nome_pasta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T19:03:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_E101')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_evis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da Ecoponte para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ATIVID'\n\t\t\t\t\t, 'CAUSAS'\n\t\t\t\t\t, 'CONMET'\n\t\t\t\t\t, 'CTRVIA'\n\t\t\t\t\t, 'FUNCIO'\n\t\t\t\t\t, 'GRAVID'\n\t\t\t\t\t, 'GRUNAT'\n\t\t\t\t\t, 'MODVEI'\n\t\t\t\t\t, 'NATURE'\n\t\t\t\t\t, 'OCORRE'\n\t\t\t\t\t, 'OCOVEI'\n\t\t\t\t\t, 'OCOVIA'\n\t\t\t\t\t, 'OCOVIT'\n\t\t\t\t\t, 'ORIGEM'\n\t\t\t\t\t, 'SENTID'\n\t\t\t\t\t, 'TIPATE'\n\t\t\t\t\t, 'TIPVEI'\n\t\t\t\t\t, 'TIPVIA'\n\t\t\t\t\t, 'TIPVIT'\n\t\t\t\t\t, 'VEIVIA'\n\t\t\t\t\t, 'VIATUR'\n\t\t\t\t\t, 'VITAMB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_SGR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_PONT",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "SGR/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T19:04:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_SGR_PONT')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_sgr_pont')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sharepoint_carregadores_eletricos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetBearerToken",
						"description": "Obtém Bearer Token do Sharepoint Eco.",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://accounts.accesscontrol.windows.net/bf7db00b-6dcc-41f4-8148-8653bb3d6537/tokens/OAuth/2",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "grant_type=client_credentials&client_id=fa8ee82d-0b82-49f7-96f4-5c75afa34628@bf7db00b-6dcc-41f4-8148-8653bb3d6537&client_secret=3E08Q~feNpWfFmEDrCJGWZq.~Y7phB.9v6i.Gav3&resource=00000003-0000-0ff1-ce00-000000000000/grupoecorodovias.sharepoint.com@bf7db00b-6dcc-41f4-8148-8653bb3d6537",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyDataFromSharepoint",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "GetBearerToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SharepointBinary",
								"type": "DatasetReference",
								"parameters": {
									"SharepointDominio": {
										"value": "@pipeline().parameters.SharepointDominio",
										"type": "Expression"
									},
									"SharepointSite": {
										"value": "@pipeline().parameters.SharepointSite",
										"type": "Expression"
									},
									"CaminhoRelativo": {
										"value": "@pipeline().parameters.CaminhoRelativo",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureDataLakeBinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SharepointDominio": {
						"type": "string",
						"defaultValue": "grupoecorodovias"
					},
					"SharepointSite": {
						"type": "string",
						"defaultValue": "teste_planilha"
					},
					"CaminhoRelativo": {
						"type": "string",
						"defaultValue": "Documentos Compartilhados/Fornecedores Bloqueados/"
					}
				},
				"folder": {
					"name": "01_INGESTAO/SHAREPOINT"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SharepointBinary')]",
				"[concat(variables('factoryId'), '/datasets/AzureDataLakeBinary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tolln3_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão diaria de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('PAGAMENTO'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T19:24:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLN3')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tolln3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tolln3_mensal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão mensal de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TRANSITO_FECHAMENTO'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaMensal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroMes",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcialMes",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroMes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroMes').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialMes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialMes').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/MENSAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T20:19:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLN3')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tolln3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tolln3_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão semanal de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ISENTO'\n                , 'ISENTO_PRACA'\n                , 'MOTIVO_PASSAGEM_GRATUITA'\n                , 'CATEGORIA'\n                , 'CONCESSAO'\n                , 'CP_SUBTPO_PGTO'\n                , 'CP_TIPO_PISTA'\n                , 'CP_TPO_PGTO'\n                , 'DIM_TIPO_PAGTO'\n                , 'OSA'\n                , 'OSA_CODIGO'\n                , 'PRACA'\n                , 'PISTA'\n                , 'CP_CLASSIFICAO_DESCONTO'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaSemanal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-05T17:09:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLN3')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tolln3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão diária de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('FACT_EXTRATO_OPERACIONAL'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T18:58:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLPACKBI')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_incr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão incremental de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('FACT_EXTRATO_TRAFEGO')\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/INCREMENTAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T19:03:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLPACKBI')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão semanal de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('DIM_CONCESSAO'\n                    , 'DIM_SENTIDO'\n                    , 'DIM_TIPO_VALIDACAO'\n                    , 'DIM_CLASSIFICAO_DESCONTO'\n                    , 'DIM_PISTA'\n                    , 'DIM_PRACA'\n                    , 'DIM_CATEGORIA'\n                    , 'DIM_TIPO_PAGTO'\n                    , 'DIM_OPERADOR'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T19:08:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLPACKBI')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_tudo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('DIM_OPERADOR')\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaTotal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string",
						"defaultValue": "60"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/TUDO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T20:38:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_TOLLPACKBI')]",
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_tollpackbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ouro_report_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_fornecedor_tb_fornecedor_selecao_ambiental",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/FORNECEDOR/TB_FORNECEDOR_SELECAO_AMBIENTAL",
							"baseParameters": {
								"read_mode_fornecedor_compras": "delta",
								"input_path_fornecedor_compras": "/camada_ouro/fornecedor/ft_fornecedor_compras/",
								"input_name_fornecedor_compras": "ft_fornecedor_compras",
								"input_options_fornecedor_compras": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/fornecedor/tb_fornecedor_selecao_ambiental/",
								"output_name": "tb_fornecedor_selecao_ambiental",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_CRIACAO",
								"catalog": "hive_metastore",
								"schema": "fornecedor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_fornecedor_tb_fornecedor_selecao_social",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_fornecedor_tb_fornecedor_selecao_ambiental",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/FORNECEDOR/TB_FORNECEDOR_SELECAO_SOCIAL",
							"baseParameters": {
								"read_mode_fornecedor_compras": "delta",
								"input_path_fornecedor_compras": "/camada_ouro/fornecedor/ft_fornecedor_compras/",
								"input_name_fornecedor_compras": "ft_fornecedor_compras",
								"input_options_fornecedor_compras": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/fornecedor/tb_fornecedor_selecao_social/",
								"output_name": "tb_fornecedor_selecao_social",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_CRIACAO",
								"catalog": "hive_metastore",
								"schema": "fornecedor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "04_OURO_REPORT/FORNECEDOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ouro_report_juridico')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_tb_acoes_legais_antitruste_monopolio",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/JURIDICO/TB_ACOES_LEGAIS_ANTITRUSTE_MONOPOLIO",
							"baseParameters": {
								"read_mode_processo_pagamento": "delta",
								"input_path_processo_pagamento": "/camada_ouro/juridico/ft_processo_pagamento/",
								"input_name_processo_pagamento": "ft_processo_pagamento",
								"input_options_processo_pagamento": "{}",
								"read_mode_unidade": "delta",
								"input_path_unidade": "/camada_ouro/juridico/dm_unidade/",
								"input_name_unidade": "dm_unidade",
								"input_options_unidade": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/juridico/tb_acoes_legais_antitruste_monopolio/",
								"output_name": "tb_acoes_legais_antitruste_monopolio",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_ENCERRAMENTO",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_juridico_tb_conformidade_leis_regulamentos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_acoes_legais_antitruste_monopolio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/JURIDICO/TB_CONFORMIDADE_LEIS_REGULAMENTOS",
							"baseParameters": {
								"read_mode_processo_pagamento": "delta",
								"input_path_processo_pagamento": "/camada_ouro/juridico/ft_processo_pagamento/",
								"input_name_processo_pagamento": "ft_processo_pagamento",
								"input_options_processo_pagamento": "{}",
								"read_mode_unidade": "delta",
								"input_path_unidade": "/camada_ouro/juridico/dm_unidade/",
								"input_name_unidade": "dm_unidade",
								"input_options_unidade": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/juridico/tb_conformidade_leis_regulamentos/",
								"output_name": "tb_conformidade_leis_regulamentos",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_ENCERRAMENTO,DS_UNIDADE",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_juridico_tb_multas_sancoes_ambientais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_juridico_tb_conformidade_leis_regulamentos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/JURIDICO/TB_MULTAS_SANCOES_AMBIENTAIS",
							"baseParameters": {
								"read_mode_processo_pagamento": "delta",
								"input_path_processo_pagamento": "/camada_ouro/juridico/ft_processo_pagamento/",
								"input_name_processo_pagamento": "ft_processo_pagamento",
								"input_options_processo_pagamento": "{}",
								"read_mode_unidade": "delta",
								"input_path_unidade": "/camada_ouro/juridico/dm_unidade/",
								"input_name_unidade": "dm_unidade",
								"input_options_unidade": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/juridico/tb_multas_sancoes_ambientais/",
								"output_name": "tb_multas_sancoes_ambientais",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_ENCERRAMENTO,DS_UNIDADE",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_nao_conformidade_leis_regulamentos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_juridico_tb_multas_sancoes_ambientais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/JURIDICO/TB_NAO_CONFORMIDADE_LEIS_REGULAMENTO",
							"baseParameters": {
								"read_mode_processo_pagamento": "delta",
								"input_path_processo_pagamento": "/camada_ouro/juridico/ft_processo_pagamento/",
								"input_name_processo_pagamento": "ft_processo_pagamento",
								"input_options_processo_pagamento": "{}",
								"read_mode_unidade": "delta",
								"input_path_unidade": "/camada_ouro/juridico/dm_unidade/",
								"input_name_unidade": "dm_unidade",
								"input_options_unidade": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/juridico/tb_nao_conformidade_leis_regulamentos/",
								"output_name": "tb_nao_conformidade_leis_regulamentos",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_ENCERRAMENTO,DS_UNIDADE",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "04_OURO_REPORT/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ouro_report_pessoa_pagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ouro_report_tb_colaborador_categoria_funcional_idade",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_COLABORADOR_CATEGORIA_FUNCIONAL_IDADE",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_colaborador_categoria_funcional_idade/",
								"output_name": "tb_colaborador_categoria_funcional_idade",
								"output_options": "{}",
								"output_keys": "CD_GENERO,FAIXA_ETARIA,CD_UNIDADE,TOTAL_PESSOAS,ANO_ANALISE,CATEGORIA_FUNCIONAL",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_colaboradores_idade_inferior_30_anos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_colaborador_categoria_funcional_idade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_COLABORADORES_IDADE_INFERIOR_30_ANOS",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_colaboradores_idade_inferior_30_anos/",
								"output_name": "tb_colaboradores_idade_inferior_30_anos",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_colaborador_tipo_contrato",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_colaboradores_idade_inferior_30_anos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_COLABORADOR_TIPO_CONTRATO",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_colaborador_categoria/",
								"output_name": "tb_colaborador_categoria",
								"output_options": "{}",
								"output_keys": "CD_GENERO,REGIAO_BRASIL,TOTAL_PESSOAS,ANO_ANALISE,TIPO_CONTRATO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_contratacoes_demissoes",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_colaborador_tipo_contrato",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_CONTRATACOES_DEMISSOES",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_contratacoes_demissoes/",
								"output_name": "tb_contratacoes_demissoes",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE,FAIXA_ETARIA,REGIAO_BRASIL,GENERO,TOTAL_PESSOAS",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_executivos_local",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_contratacoes_demissoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_EXECUTIVOS_LOCAL",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_executivos_local/",
								"output_name": "tb_executivos_local",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE,FAIXA_ETARIA,GENERO,TOTAL_PESSOAS,PARAMETRO_CONTRATACAO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_licenca_maternidade_paternidade",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_executivos_local",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_LICENCA_MATERNIDADE_PATERNIDADE",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_pagamento_pessoa_cargo": "delta",
								"input_path_pagamento_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pagamento_pessoa_cargo/",
								"input_name_pagamento_pessoa_cargo": "ft_pagamento_pessoa_cargo",
								"input_options_pagamento_pessoa_cargo": "{}",
								"read_mode_tipo_afastamento": "delta",
								"input_path_tipo_afastamento": "/camada_ouro/pessoa_pagamento/dm_tipo_afastamento/",
								"input_name_tipo_afastamento": "dm_tipo_afastamento",
								"input_options_tipo_afastamento": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_licenca_maternidade_paternidade/",
								"output_name": "tb_licenca_maternidade_paternidade",
								"output_options": "{}",
								"output_keys": "DT_ANO_MES_PERIODO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_novas_contratacoes",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_licenca_maternidade_paternidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_NOVAS_CONTRATACOES",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_novas_contratacoes/",
								"output_name": "tb_novas_contratacoes",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE,FAIXA_ETARIA,GENERO,TOTAL_PESSOAS,PARAMETRO_CONTRATACAO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_proporcao_remuneracao_anual",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_novas_contratacoes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_PROPORCAO_REMUNERACAO_ANUAL",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_afastamento": "delta",
								"input_path_afastamento": "/camada_ouro/pessoa_pagamento/ft_afastamento/",
								"input_name_afastamento": "ft_afastamento",
								"input_options_afastamento": "{}",
								"read_mode_tipo_pagamento": "delta",
								"input_path_tipo_pagamento": "/camada_ouro/pessoa_pagamento/dm_tipo_pagamento/",
								"input_name_tipo_pagamento": "dm_tipo_pagamento",
								"input_options_tipo_pagamento": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_proporcao_remuneracao_anual/",
								"output_name": "tb_proporcao_remuneracao_anual",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE,GENERO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_qtd_colaboradores",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_proporcao_remuneracao_anual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_QTD_COLABORADORES",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_qtd_colaboradores/",
								"output_name": "tb_qtd_colaboradores",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE,TIPO_EMPREGO,ESTADO,GENERO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ouro_report_tb_saida_colaborador",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ouro_report_tb_qtd_colaboradores",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/04-REPORT/PESSOA_PAGAMENTO/TB_SAIDA_COLABORADOR",
							"baseParameters": {
								"read_mode_pessoa_cargo": "delta",
								"input_path_pessoa_cargo": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"input_name_pessoa_cargo": "ft_pessoa_cargo",
								"input_options_pessoa_cargo": "{}",
								"read_mode_dm_pessoa": "delta",
								"input_path_dm_pessoa": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"input_name_dm_pessoa": "dm_pessoa",
								"input_options_dm_pessoa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_report/pessoa_pagamento/tb_saida_colaborador/",
								"output_name": "tb_saida_colaborador",
								"output_options": "{}",
								"output_keys": "ANO_ANALISE,FAIXA_ETARIA,GENERO,TOTAL_PESSOAS,PARAMETRO_CONTRATACAO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "04_OURO_REPORT/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_area_direito')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_area_direito",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_AREA_DIREITO",
							"baseParameters": {
								"read_mode_area_direito": "delta",
								"input_path_area_direito": "/camada_prata/juridico/area_direito/",
								"input_name_area_direito": "juridico_area_direito",
								"input_options_area_direito": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_area_direito/",
								"output_name": "dm_area_direito",
								"output_options": "{}",
								"output_keys": "CD_AREA_DIREITO",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_empresa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_empresa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_EMPRESA",
							"baseParameters": {
								"read_mode_empresa": "delta",
								"input_path_empresa": "/camada_prata/juridico/empresa/",
								"input_name_empresa": "juridico_empresa",
								"input_options_empresa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_empresa/",
								"output_name": "dm_empresa",
								"output_options": "{}",
								"output_keys": "CD_EMPRESA",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_grupo_empresa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_grupo_empresa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_GRUPO_EMPRESA",
							"baseParameters": {
								"read_mode_grupo_empresa": "delta",
								"input_path_grupo_empresa": "/camada_prata/juridico/grupo_empresa/",
								"input_name_grupo_empresa": "juridico_grupo_empresa",
								"input_options_grupo_empresa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_grupo_empresa/",
								"output_name": "dm_grupo_empresa",
								"output_options": "{}",
								"output_keys": "CD_GRUPO_EMPRESA",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_origem_causa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_origem_causa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_ORIGEM_CAUSA",
							"baseParameters": {
								"read_mode_origem_causa": "delta",
								"input_path_origem_causa": "/camada_prata/juridico/origem_causa/",
								"input_name_origem_causa": "juridico_origem_causa",
								"input_options_origem_causa": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_origem_causa/",
								"output_name": "dm_origem_causa",
								"output_options": "{}",
								"output_keys": "CD_ORIGEM_CAUSA",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_parte_contraria')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_parte_contraria",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_PARTE_CONTRARIA",
							"baseParameters": {
								"read_mode_parte_contraria": "delta",
								"input_path_parte_contraria": "/camada_prata/juridico/parte_contraria/",
								"input_name_parte_contraria": "juridico_parte_contraria",
								"input_options_parte_contraria": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_parte_contraria/",
								"output_name": "dm_parte_contraria",
								"output_options": "{}",
								"output_keys": "CD_PARTE_CONTRARIA",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_processo_resultado')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_processo_resultado",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_PROCESSO_RESULTADO",
							"baseParameters": {
								"read_mode_td_processo_resultado": "delta",
								"input_path_td_processo_resultado": "/camada_prata/juridico/td_processo_resultado/",
								"input_name_td_processo_resultado": "juridico_td_processo_resultado",
								"input_options_td_processo_resultado": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_processo_resultado/",
								"output_name": "dm_processo_resultado",
								"output_options": "{}",
								"output_keys": "CD_PROCESSO_RESULTADO",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_processo_status')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_processo_status",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_PROCESSO_STATUS",
							"baseParameters": {
								"read_mode_td_processo_status": "delta",
								"input_path_td_processo_status": "/camada_prata/juridico/td_processo_status/",
								"input_name_td_processo_status": "juridico_td_processo_status",
								"input_options_td_processo_status": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_processo_status/",
								"output_name": "dm_processo_status",
								"output_options": "{}",
								"output_keys": "CD_PROCESSO_STATUS",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_tipo_motivo_encerramento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_tipo_motivo_encerramento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_TIPO_MOTIVO_ENCERRAMENTO",
							"baseParameters": {
								"read_mode_tipo_motivo_encerramento": "delta",
								"input_path_tipo_motivo_encerramento": "/camada_prata/juridico/tipo_motivo_encerramento/",
								"input_name_tipo_motivo_encerramento": "juridico_tipo_motivo_encerramento",
								"input_options_tipo_motivo_encerramento": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_tipo_motivo_encerramento/",
								"output_name": "dm_tipo_motivo_encerramento",
								"output_options": "{}",
								"output_keys": "CD_TIPO_MOTIVO_ENCERRAMENTO",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_dm_unidade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_unidade",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/DM_UNIDADE",
							"baseParameters": {
								"read_mode_unidade": "delta",
								"input_path_unidade": "/camada_prata/juridico/unidade/",
								"input_name_unidade": "juridico_unidade",
								"input_options_unidade": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/dm_unidade/",
								"output_name": "dm_unidade",
								"output_options": "{}",
								"output_keys": "CD_UNIDADE",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_ft_fornecedor_compras')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_ft_fornecedor_compras",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/FORNECEDOR/FT_FORNECEDOR_COMPRAS",
							"baseParameters": {
								"read_mode_fornecedor": "delta",
								"input_path_fornecedor": "/camada_prata/ecompras/fornecedor/",
								"input_name_fornecedor": "ecompras_fornecedor",
								"input_options_fornecedor": "{}",
								"read_mode_vw_fornecedor": "delta",
								"input_path_vw_fornecedor": "/camada_prata/ecompras/vw_fornecedor/",
								"input_name_vw_fornecedor": "ecompras_vw_fornecedor",
								"input_options_vw_fornecedor": "{}",
								"read_mode_sap_ecc_ekko": "delta",
								"input_path_sap_ecc_ekko": "/camada_prata/sap_ecc/ekko/",
								"input_name_sap_ecc_ekko": "ekko",
								"input_options_sap_ecc_ekko": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/fornecedor/ft_fornecedor_compras/",
								"output_name": "ft_fornecedor_compras",
								"output_options": "{}",
								"output_keys": "CD_FORNECEDOR",
								"catalog": "hive_metastore",
								"schema": "fornecedor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/FORNECEDOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_juridico_ft_processo_pagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_ft_processo_pagamento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/JURIDICO/FT_PROCESSO_PAGAMENTO",
							"baseParameters": {
								"read_mode_processo": "delta",
								"input_path_processo": "/camada_prata/juridico/processo/",
								"input_name_processo": "juridico_processo",
								"input_options_processo": "{}",
								"read_mode_processo_valores_pagamento_ass": "delta",
								"input_path_processo_valores_pagamento_ass": "/camada_prata/juridico/processo_valores_pagamento_ass/",
								"input_name_processo_valores_pagamento_ass": "juridico_processo_valores_pagamento_ass",
								"input_options_processo_valores_pagamento_ass": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/juridico/ft_processo_pagamento/",
								"output_name": "ft_processo_pagamento",
								"output_options": "{}",
								"output_keys": "CD_PROCESSO,CD_PROCESSO_VALORES_PAGAMENTO_ASS",
								"catalog": "hive_metastore",
								"schema": "juridico"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/JURIDICO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_dbo_aux_cobertura_praca')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_kcor_dbo_aux_cobertura_praca",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.AUX_Cobertura_Praca",
							"baseParameters": {
								"read_mode_aux_cobertura_praca": "delta",
								"input_path_aux_cobertura_praca": "/camada_prata/kcor/dbo.aux_cobertura_praca/",
								"input_name_aux_cobertura_praca": "dbo.aux_cobertura_praca",
								"input_options_aux_cobertura_praca": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/kcor/dbo.AUX_Cobertura_Praca/",
								"output_name": "dbo_AUX_Cobertura_Praca",
								"output_options": "{}",
								"output_keys": "CD_PRACA",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_dbo_aux_rodovia_concessao')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_kcor_dbo_aux_rodovia_concessao",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.AUX_Rodovia_Concessao",
							"baseParameters": {
								"read_mode_aux_rodovia_concessao": "delta",
								"input_path_aux_rodovia_concessao": "/camada_prata/kcor/dbo.aux_rodovia_concessao/",
								"input_name_aux_rodovia_concessao": "dbo.aux_rodovia_concessao",
								"input_options_aux_rodovia_concessao": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/kcor/dbo.AUX_Rodovia_Concessao/",
								"output_name": "dbo_AUX_Rodovia_Concessao",
								"output_options": "{}",
								"output_keys": "CodRodovia",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_dbo_dw_trecho_homogeneo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_kcor_dbo_dw_trecho_homogeneo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.DW_TRECHO_HOMOGENEO",
							"baseParameters": {
								"read_mode_dw_trecho_homogeneo": "delta",
								"input_path_dw_trecho_homogeneo": "/camada_prata/kcor/dbo.dw_trecho_homogeneo/",
								"input_name_dw_trecho_homogeneo": "dbo.dw_trecho_homogeneo",
								"input_options_dw_trecho_homogeneo": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/kcor/dbo.DW_TRECHO_HOMOGENEO/",
								"output_name": "dbo_DW_TRECHO_HOMOGENEO",
								"output_options": "{}",
								"output_keys": "ID_TH_GRUPO",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/KCOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/e050_ecer/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/e050_ecer/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/e050_ecer/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/e050_ecer/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/e050_ecer/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/e050_ecer/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/e050_ecer/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/e050_ecer/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/e050_ecer/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_e050ecer_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/e050_ecer/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/e101/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/e101/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/e101/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/e101/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/e101/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/e101/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/e101/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/e101/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/e101/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_e101_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/e101/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/e135/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/e135/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/e135/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/e135/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/e135/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/e135/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/e135/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/e135/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/e135/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_e135_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/e135/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/eara/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/eara/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/eara/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/eara/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/eara/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/eara/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/eara/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/eara/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/eara/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_eara_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/eara/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/enor/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/enor/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/enor/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/enor/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/enor/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/enor/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/enor/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/enor/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/enor/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_enor_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/enor/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/epst/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/epst/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/epst/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/epst/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/epst/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/epst/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/epst/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/epst/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/epst/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_epst_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/epst/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/ermin/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/ermin/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/ermin/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/ermin/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/ermin/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/ermin/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/ermin/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/ermin/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/ermin/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_ermin_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/ermin/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/esul/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/esul/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/esul/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/esul/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/esul/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/esul/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/esul/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/esul/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/esul/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_esul_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/esul/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/evis/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/evis/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/evis/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/evis/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/evis/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/evis/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/evis/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/evis/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/evis/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_evis_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/evis/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/pont/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/pont/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/pont/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAnimais",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/pont/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/pont/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/pont/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tauxRecursos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/pont/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabAnimais",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAnimais",
							"baseParameters": {
								"read_mode_TabAnimais": "delta",
								"input_name_TabAnimais": "dbo.TabAnimais",
								"input_path_TabAnimais": "camada_prata/kcor/dbo.TabAnimais/pont/",
								"input_options_TabAnimais": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAnimais/",
								"output_name": "dbo_TabAnimais",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,CodAnimal,CodProvAnimal,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tauxRecursos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TauxRecursos",
							"baseParameters": {
								"read_mode_TauxRecursos": "delta",
								"input_name_TauxRecursos": "dbo.TauxRecursos",
								"input_path_TauxRecursos": "camada_prata/kcor/dbo.TauxRecursos/pont/",
								"input_options_TauxRecursos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TauxRecursos/",
								"output_name": "dbo_TauxRecursos",
								"output_options": "{}",
								"output_keys": "CodRecurso,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_incr_pont_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "IterarPastas",
						"description": "Realiza a iteração entre as pastas listadas no passo anterior (FiltrarPastas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FiltrarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FiltrarPastas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarNomePasta",
									"description": "Atribui à variável \"pasta_atual\" o nome da pasta que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "pasta_atual",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SetarNomePasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('pasta_atual'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaChave",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "chave",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].chave",
											"type": "Expression"
										}
									}
								},
								{
									"name": "prata_ouro_dbo_flatfile",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "SetaChave",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": {
											"value": "@concat('/03-OURO/KCOR/',variables('pasta_atual'))",
											"type": "Expression"
										},
										"baseParameters": {
											"read_mode": "delta",
											"input_name": {
												"value": "@variables('pasta_atual')",
												"type": "Expression"
											},
											"input_path": {
												"value": "@concat('camada_prata/kcor/',variables('pasta_atual'),'/pont/')",
												"type": "Expression"
											},
											"input_options": "{}",
											"write_mode_output": "upsert",
											"output_path": {
												"value": "@concat('camada_ouro/kcor/',variables('pasta_atual'),'/')",
												"type": "Expression"
											},
											"output_name": {
												"value": "@replace(variables('pasta_atual'), '.','_')",
												"type": "Expression"
											},
											"output_options": "{}",
											"output_keys": {
												"value": "@concat(variables('chave'),',Unidade_dw')",
												"type": "Expression"
											},
											"catalog": "hive_metastore",
											"schema": "kcor"
										}
									},
									"linkedServiceName": {
										"referenceName": "dbrk_eco_ls",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelas",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "lista_tabelas",
							"value": "[[\"dbo.TAuxSentidos\",\"dbo.TAuxTiposAcidentes\",\"dbo.TAuxTiposAtendimentos\",\"dbo.TAuxTiposOcorrencias\",\"dbo.TAuxTiposRecursos\",\"dbo.TAuxTiposVeiculos\",\"dbo.TAuxVitPosicoes\",\"dbo.TAuxVitSituacoes\",\"dbo.TAuxCondicoesMeteorologicas\",\"dbo.TAuxCausasProvaveis\",\"dbo.TAuxOrigemChamado\",\"dbo.TAuxConservGestores\",\"dbo.TAuxConservStatus\",\"dbo.TAuxConservTipos\",\"dbo.TAuxConservOrigem\",\"dbo.TAuxAnimais\",\"dbo.TAuxAnimaisDestinos\",\"dbo.TAuxTiposProvAnimais\",\"dbo.TAuxFuncionarios\",\"dbo.TAuxRodovias\"]"
						}
					},
					{
						"name": "FiltrarPastas",
						"description": "Filtra apenas os itens que são pastas.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ListarPastas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarPastas').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(and(equals(item().type, 'Folder'),startswith(item().name,'dbo')),\n     contains(variables('lista_tabelas'), \n     item().name))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ListarPastas",
						"description": "Lista todas as pastas contidas na camada bronze do banco de dados a ser processado.",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "camada_prata/kcor/",
										"type": "Expression"
									},
									"arquivo": "*.*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"nome_pasta": {
						"type": "String"
					},
					"lista_tabelas": {
						"type": "String"
					},
					"pasta_atual": {
						"type": "String"
					},
					"nome_arquivo": {
						"type": "String"
					},
					"chave": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T22:52:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dlPath')]",
				"[concat(variables('factoryId'), '/datasets/planilha_kcor_e050ecer')]",
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/e050_ecer/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/e050_ecer/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/e050_ecer/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/e050_ecer/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/e050_ecer/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/e050_ecer/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/e101/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/e101/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/e101/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/e101/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/e101/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/e101/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/e135/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/e135/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/e135/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/e135/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/e135/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/e135/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/eara/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/eara/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/eara/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/eara/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/eara/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/eara/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/enor/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/enor/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/enor/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/enor/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/enor/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/enor/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/epst/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/epst/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/epst/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/epst/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/epst/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/epst/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/ermin/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/ermin/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/ermin/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/ermin/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/ermin/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/ermin/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/esul/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/esul/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/esul/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/esul/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/esul/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/esul/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/evis/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/evis/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/evis/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/evis/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/evis/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/evis/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_trans_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentesAb",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentesAb",
							"baseParameters": {
								"read_mode_TabAcidentesAb": "delta",
								"input_name_TabAcidentesAb": "dbo.TabAcidentesAb",
								"input_path_TabAcidentesAb": "camada_prata/kcor_trans/dbo.TabAcidentesAb/pont/",
								"input_options_TabAcidentesAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabAcidentesAb/",
								"output_name": "dbo_TabAcidentesAb",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrenciasAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentesAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrenciasAb",
							"baseParameters": {
								"read_mode_TabOcorrenciasAb": "delta",
								"input_name_TabOcorrenciasAb": "dbo.TabOcorrenciasAb",
								"input_path_TabOcorrenciasAb": "camada_prata/kcor_trans/dbo.TabOcorrenciasAb/pont/",
								"input_options_TabOcorrenciasAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabOcorrenciasAb/",
								"output_name": "dbo_TabOcorrenciasAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionadosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrenciasAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionadosAb",
							"baseParameters": {
								"read_mode_TabRecursosAcionadosAb": "delta",
								"input_name_TabRecursosAcionadosAb": "dbo.TabRecursosAcionadosAb",
								"input_path_TabRecursosAcionadosAb": "camada_prata/kcor_trans/dbo.TabRecursosAcionadosAb/pont/",
								"input_options_TabRecursosAcionadosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabRecursosAcionadosAb/",
								"output_name": "dbo_TabRecursosAcionadosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionadosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidosAb",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidosAb": "delta",
								"input_name_TabVeiculosEnvolvidosAb": "dbo.TabVeiculosEnvolvidosAb",
								"input_path_TabVeiculosEnvolvidosAb": "camada_prata/kcor_trans/dbo.TabVeiculosEnvolvidosAb/pont/",
								"input_options_TabVeiculosEnvolvidosAb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVeiculosEnvolvidosAb/",
								"output_name": "dbo_TabVeiculosEnvolvidosAb",
								"output_options": "{}",
								"output_keys": "DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimasAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidosAb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimasAB",
							"baseParameters": {
								"read_mode_TabVitimasAB": "delta",
								"input_name_TabVitimasAB": "dbo.TabVitimasAB",
								"input_path_TabVitimasAB": "camada_prata/kcor_trans/dbo.TabVitimasAB/pont/",
								"input_options_TabVitimasAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabVitimasAB/",
								"output_name": "dbo_TabVitimasAB",
								"output_options": "{}",
								"output_keys": "UsuarioID,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacaoAB",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimasAB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacaoAB",
							"baseParameters": {
								"read_mode_TabConservacaoAB": "delta",
								"input_name_TabConservacaoAB": "dbo.TabConservacaoAB",
								"input_path_TabConservacaoAB": "camada_prata/kcor_trans/dbo.TabConservacaoAB/pont/",
								"input_options_TabConservacaoAB": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor_trans/dbo.TabConservacaoAB/",
								"output_name": "dbo_TabConservacaoAB",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TRANSACIONAL/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/e050_ecer/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/e050_ecer/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/e050_ecer/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/e050_ecer/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/e050_ecer/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/e050_ecer/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/e050_ecer/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/e101/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/e101/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/e101/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/e101/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/e101/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/e101/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/e101/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/e135/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/e135/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/e135/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/e135/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/e135/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/e135/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/e135/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/eara/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/eara/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/eara/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/eara/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/eara/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/eara/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/eara/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/enor/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/enor/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/enor/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/enor/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/enor/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/enor/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/enor/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/epst/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/epst/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/epst/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/epst/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/epst/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/epst/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/epst/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_ermin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/ermin/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/ermin/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/ermin/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/ermin/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/ermin/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/ermin/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/ermin/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/ERMIN"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_esul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/esul/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/esul/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/esul/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/esul/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/esul/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/esul/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/esul/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/ESUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/evis/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/evis/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/evis/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/evis/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/evis/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/evis/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/evis/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_kcor_tudo_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_tabAcidentes",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabAcidentes",
							"baseParameters": {
								"read_mode_TabAcidentes": "delta",
								"input_name_TabAcidentes": "dbo.TabAcidentes",
								"input_path_TabAcidentes": "camada_prata/kcor/dbo.TabAcidentes/pont/",
								"input_options_TabAcidentes": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabAcidentes/",
								"output_name": "dbo_TabAcidentes",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabOcorrencias",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabAcidentes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabOcorrencias",
							"baseParameters": {
								"read_mode_TabOcorrencias": "delta",
								"input_name_TabOcorrencias": "dbo.TabOcorrencias",
								"input_path_TabOcorrencias": "camada_prata/kcor/dbo.TabOcorrencias/pont/",
								"input_options_TabOcorrencias": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabOcorrencias/",
								"output_name": "dbo_TabOcorrencias",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,HoraOcorrencia,CodOrigem,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosAcionados",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabOcorrencias",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosAcionados",
							"baseParameters": {
								"read_mode_TabRecursosAcionados": "delta",
								"input_name_TabRecursosAcionados": "dbo.TabRecursosAcionados",
								"input_path_TabRecursosAcionados": "camada_prata/kcor/dbo.TabRecursosAcionados/pont/",
								"input_options_TabRecursosAcionados": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosAcionados/",
								"output_name": "dbo_TabRecursosAcionados",
								"output_options": "{}",
								"output_keys": "DataOcorrencia,NumOcorrencia,CodRecurso,HoraAcionamento,CodTipoAtend,NUMACIONAMENTO,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabRecursosCoberturas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabConservacao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabRecursosCoberturas",
							"baseParameters": {
								"read_mode_TabRecursosCoberturas": "delta",
								"input_name_TabRecursosCoberturas": "dbo.TabRecursosCoberturas",
								"input_path_TabRecursosCoberturas": "camada_prata/kcor/dbo.TabRecursosCoberturas/pont/",
								"input_options_TabRecursosCoberturas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabRecursosCoberturas/",
								"output_name": "dbo_TabRecursosCoberturas",
								"output_options": "{}",
								"output_keys": "CodRecurso,CodCobertura,InicioCob,FimCob,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVeiculosEnvolvidos",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabRecursosAcionados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVeiculosEnvolvidos",
							"baseParameters": {
								"read_mode_TabVeiculosEnvolvidos": "delta",
								"input_name_TabVeiculosEnvolvidos": "dbo.TabVeiculosEnvolvidos",
								"input_path_TabVeiculosEnvolvidos": "camada_prata/kcor/dbo.TabVeiculosEnvolvidos/pont/",
								"input_options_TabVeiculosEnvolvidos": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVeiculosEnvolvidos/",
								"output_name": "dbo_TabVeiculosEnvolvidos",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,DataOcorrencia,NumVeiculo,CodTipoVeiculo,PlacaVeiculo,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabVitimas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVeiculosEnvolvidos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabVitimas",
							"baseParameters": {
								"read_mode_TabVitimas": "delta",
								"input_name_TabVitimas": "dbo.TabVitimas",
								"input_path_TabVitimas": "camada_prata/kcor/dbo.TabVitimas/pont/",
								"input_options_TabVitimas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabVitimas/",
								"output_name": "dbo_TabVitimas",
								"output_options": "{}",
								"output_keys": "NumOcorrencia,NumVeiculo,CodCondicao,NumVitima,DataIns,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tabConservacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tabVitimas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/KCOR/dbo.TabConservacao",
							"baseParameters": {
								"read_mode_TabConservacao": "delta",
								"input_name_TabConservacao": "dbo.TabConservacao",
								"input_path_TabConservacao": "camada_prata/kcor/dbo.TabConservacao/pont/",
								"input_options_TabConservacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/kcor/dbo.TabConservacao/",
								"output_name": "dbo_TabConservacao",
								"output_options": "{}",
								"output_keys": "NumSolicitacao,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "kcor"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "KCOR/TUDO/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_cargo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_cargo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_CARGO",
							"baseParameters": {
								"read_mode_emp_job": "delta",
								"input_path_emp_job": "/camada_prata/sap_sf/emp_job/",
								"input_name_emp_job": "emp_job",
								"input_options_emp_job": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_cargo/",
								"output_name": "dm_cargo",
								"output_options": "{}",
								"output_keys": "CD_CARGO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_pessoa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_pessoa",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_PESSOA",
							"baseParameters": {
								"read_mode_per_person": "delta",
								"input_path_per_person": "/camada_prata/sap_sf/per_person/",
								"input_name_per_person": "per_person",
								"input_options_per_person": "{}",
								"read_mode_per_personal": "delta",
								"input_path_per_personal": "/camada_prata/sap_sf/per_personal/",
								"input_name_per_personal": "per_personal",
								"input_options_per_personal": "{}",
								"read_mode_state_bra": "delta",
								"input_path_state_bra": "/camada_prata/sap_sf/pl_state_bra/",
								"input_name_state_bra": "pl_state_bra",
								"input_options_state_bra": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_pessoa/",
								"output_name": "dm_pessoa",
								"output_options": "{}",
								"output_keys": "CD_PESSOA",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_relacao_trabalho')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_relacao_trabalho",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_RELACAO_TRABALHO",
							"baseParameters": {
								"read_mode_relacao_trabalho": "delta",
								"input_path_relacao_trabalho": "/camada_prata/sap_sf/pl_employment_relationship/",
								"input_name_relacao_trabalho": "pl_employment_relationship",
								"input_options_relacao_trabalho": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_relacao_trabalho/",
								"output_name": "dm_relacao_trabalho",
								"output_options": "{}",
								"output_keys": "CD_RELACAo_TRABALHO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_tipo_afastamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_tipo_afastamento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_TIPO_AFASTAMENTO",
							"baseParameters": {
								"read_mode_tipo_afastamento": "delta",
								"input_path_tipo_afastamento": "/camada_prata/sap_sf/pwbi04/",
								"input_name_tipo_afastamento": "pwbi04",
								"input_options_tipo_afastamento": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_tipo_afastamento/",
								"output_name": "dm_tipo_afastamento",
								"output_options": "{}",
								"output_keys": "CD_TIPO_AFASTAMENTO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_tipo_contrato')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_tipo_contrato",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_TIPO_CONTRATO",
							"baseParameters": {
								"read_mode_tipo_contrato": "delta",
								"input_path_tipo_contrato": "/camada_prata/sap_sf/pl_contract_type/",
								"input_name_tipo_contrato": "pl_contract_type",
								"input_options_tipo_contrato": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_tipo_contrato/",
								"output_name": "dm_tipo_contrato",
								"output_options": "{}",
								"output_keys": "CD_TIPO_CONTRATO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_tipo_emprego')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_tipo_emprego",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_TIPO_EMPREGO",
							"baseParameters": {
								"read_mode_tipo_emprego": "delta",
								"input_path_tipo_emprego": "/camada_prata/sap_sf/pl_employment_type/",
								"input_name_tipo_emprego": "pl_employment_type",
								"input_options_tipo_emprego": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_tipo_emprego/",
								"output_name": "dm_tipo_emprego",
								"output_options": "{}",
								"output_keys": "CD_TIPO_EMPREGO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_tipo_pagamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_tipo_pagamento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_TIPO_PAGAMENTO",
							"baseParameters": {
								"read_mode_PWBI01O": "delta",
								"input_path_PWBI01O": "/camada_prata/sap_sf/pwbi01o/",
								"input_name_PWBI01O": "pwbi01o",
								"input_options_PWBI01O": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_tipo_pagamento/",
								"output_name": "dm_tipo_pagamento",
								"output_options": "{}",
								"output_keys": "CD_TIPO_PAGAMENTO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_unidade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_unidade",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_UNIDADE",
							"baseParameters": {
								"read_mode_fo_company": "delta",
								"input_path_fo_company": "/camada_prata/sap_sf/fo_company/",
								"input_name_fo_company": "fo_company",
								"input_options_fo_company": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_unidade/",
								"output_name": "dm_unidade",
								"output_options": "{}",
								"output_keys": "CD_UNIDADE",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_dm_vinculo_contrato')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_dm_vinculo_contrato",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/DM_VINCULO_CONTRATO",
							"baseParameters": {
								"read_mode_vinculo_contrato": "delta",
								"input_path_vinculo_contrato": "/camada_prata/sap_sf/pl_employee_class/",
								"input_name_vinculo_contrato": "pl_employee_class",
								"input_options_vinculo_contrato": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/dm_vinculo_contrato/",
								"output_name": "dm_vinculo_contrato",
								"output_options": "{}",
								"output_keys": "CD_VINCULO_CONTRATO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_ft_afastamento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_ft_afastamento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/FT_AFASTAMENTO",
							"baseParameters": {
								"read_mode_PWBI04": "delta",
								"input_path_PWBI04": "/camada_prata/sap_sf/pwbi04/",
								"input_name_PWBI04": "pwbi04",
								"input_options_PWBI04": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/ft_afastamento/",
								"output_name": "ft_afastamento",
								"output_options": "{}",
								"output_keys": "CD_PESSOA,CD_TIPO_AFASTAMENTO,DT_INICIO_AFASTAMENTO,DT_FIM_AFASTAMENTO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_ft_pagamento_pessoa_cargo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_ft_pagamento_pessoa_cargo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/FT_PAGAMENTO_PESSOA_CARGO",
							"baseParameters": {
								"read_mode_PWBI01O": "delta",
								"input_path_PWBI01O": "/camada_prata/sap_sf/pwbi01o/",
								"input_name_PWBI01O": "pwbi01o",
								"input_options_PWBI01O": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/ft_pagamento_pessoa_cargo/",
								"output_name": "ft_pagamento_pessoa_cargo",
								"output_options": "{}",
								"output_keys": "CD_PESSOA,DT_ANO_PERIODO,DT_MES_PERIODO,CD_TIPO_PAGAMENTO,VL_PAGAMENTO_REALIZADO",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_pessoa_pagamento_ft_pessoa_cargo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_pessoa_pagamento_ft_pessoa_cargo",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.0:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/PESSOA_PAGAMENTO/FT_PESSOA_CARGO",
							"baseParameters": {
								"read_mode_emp_job": "delta",
								"input_path_emp_job": "/camada_prata/sap_sf/emp_job/",
								"input_name_emp_job": "emp_job",
								"input_options_emp_job": "{}",
								"write_mode_output": "upsert",
								"output_path": "/camada_ouro/pessoa_pagamento/ft_pessoa_cargo/",
								"output_name": "ft_pessoa_cargo",
								"output_options": "{}",
								"output_keys": "CD_PESSOA",
								"catalog": "hive_metastore",
								"schema": "pessoa_pagamento"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "03_PRATA_OURO/PESSOA_PAGAMENTO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_catarata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/catarata/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/catarata/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/catarata/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/catarata/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/catarata/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/catarata/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/catarata/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/catarata/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/catarata/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/catarata/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/catarata/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/catarata/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/catarata/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/catarata/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/catarata/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/catarata/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/catarata/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/catarata/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/catarata/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/catarata/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/catarata/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/catarata/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/CATARATA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/e101/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/e101/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/e101/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/e101/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/e101/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/e101/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/e101/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/e101/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/e101/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/e101/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/e101/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/e101/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/e101/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/e101/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/e101/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/e101/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/e101/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/e101/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/e101/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/e101/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/e101/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/e101/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/e135/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/e135/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/e135/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/e135/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/e135/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/e135/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/e135/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/e135/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/e135/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/e135/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/e135/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/e135/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/e135/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/e135/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/e135/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/e135/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/e135/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/e135/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/e135/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/e135/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/e135/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/e135/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_ecopara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/ecopara/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/ecopara/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/ecopara/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/ecopara/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/ecopara/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/ecopara/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/ecopara/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/ecopara/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/ecopara/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/ecopara/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/ecopara/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/ecopara/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/ecopara/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/ecopara/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/ecopara/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/ecopara/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/ecopara/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/ecopara/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/ecopara/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/ecopara/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/ecopara/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/ecopara/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/ECOPARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_ecosul')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/ecosul/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/ecosul/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/ecosul/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/ecosul/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/ecosul/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/ecosul/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/ecosul/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/ecosul/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/ecosul/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/ecosul/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/ecosul/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/ecosul/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/ecosul/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/ecosul/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/ecosul/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/ecosul/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/ecosul/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/ecosul/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/ecosul/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/ecosul/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/ecosul/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/ecosul/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/ECOSUL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_epst')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/epst/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/epst/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/epst/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/epst/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/epst/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/epst/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/epst/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/epst/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/epst/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/epst/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/epst/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/epst/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/epst/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/epst/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/epst/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/epst/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/epst/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/epst/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/epst/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/epst/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/epst/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/epst/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/EPST"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/evis/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/evis/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/evis/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/evis/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/evis/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/evis/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/evis/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/evis/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/evis/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/evis/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/evis/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/evis/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/evis/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/evis/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/evis/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/evis/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/evis/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/evis/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/evis/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/evis/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/evis/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/evis/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:30:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_sgr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_ativid",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ATIVID",
							"baseParameters": {
								"read_mode_ativid": "delta",
								"input_name_ativid": "dbo.ATIVID",
								"input_path_ativid": "camada_prata/sgr/dbo.ATIVID/pont/",
								"input_options_ativid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ATIVID/",
								"output_name": "dbo_ativid",
								"output_options": "{}",
								"output_keys": "AtvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_causas",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ativid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CAUSAS",
							"baseParameters": {
								"read_mode_causas": "delta",
								"input_name_causas": "dbo.CAUSAS",
								"input_path_causas": "camada_prata/sgr/dbo.CAUSAS/pont/",
								"input_options_causas": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CAUSAS/",
								"output_name": "dbo_causas",
								"output_options": "{}",
								"output_keys": "CauCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_conmet",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_causas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CONMET",
							"baseParameters": {
								"read_mode_conmet": "delta",
								"input_name_conmet": "dbo.CONMET",
								"input_path_conmet": "camada_prata/sgr/dbo.CONMET/pont/",
								"input_options_conmet": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CONMET/",
								"output_name": "dbo_conmet",
								"output_options": "{}",
								"output_keys": "CmtCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ctrvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_conmet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.CTRVIA",
							"baseParameters": {
								"read_mode_ctrvia": "delta",
								"input_name_ctrvia": "dbo.CTRVIA",
								"input_path_ctrvia": "camada_prata/sgr/dbo.CTRVIA/pont/",
								"input_options_ctrvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.CTRVIA/",
								"output_name": "dbo_ctrvia",
								"output_options": "{}",
								"output_keys": "CtrDatInic,CtrSequenc,CtrHorInic,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_funcio",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ctrvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.FUNCIO",
							"baseParameters": {
								"read_mode_funcio": "delta",
								"input_name_funcio": "dbo.FUNCIO",
								"input_path_funcio": "camada_prata/sgr/dbo.FUNCIO/pont/",
								"input_options_funcio": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.FUNCIO/",
								"output_name": "dbo_funcio",
								"output_options": "{}",
								"output_keys": "FunCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_gravid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_funcio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRAVID",
							"baseParameters": {
								"read_mode_gravid": "delta",
								"input_name_gravid": "dbo.GRAVID",
								"input_path_gravid": "camada_prata/sgr/dbo.GRAVID/pont/",
								"input_options_gravid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRAVID/",
								"output_name": "dbo_gravid",
								"output_options": "{}",
								"output_keys": "GraCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_grunat",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_gravid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.GRUNAT",
							"baseParameters": {
								"read_mode_grunat": "delta",
								"input_name_grunat": "dbo.GRUNAT",
								"input_path_grunat": "camada_prata/sgr/dbo.GRUNAT/pont/",
								"input_options_grunat": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.GRUNAT/",
								"output_name": "dbo_grunat",
								"output_options": "{}",
								"output_keys": "GrnCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_modvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_grunat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.MODVEI",
							"baseParameters": {
								"read_mode_modvei": "delta",
								"input_name_modvei": "dbo.MODVEI",
								"input_path_modvei": "camada_prata/sgr/dbo.MODVEI/pont/",
								"input_options_modvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.MODVEI/",
								"output_name": "dbo_modvei",
								"output_options": "{}",
								"output_keys": "ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_nature",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_modvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.NATURE",
							"baseParameters": {
								"read_mode_nature": "delta",
								"input_name_nature": "dbo.NATURE",
								"input_path_nature": "camada_prata/sgr/dbo.NATURE/pont/",
								"input_options_nature": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.NATURE/",
								"output_name": "dbo_nature",
								"output_options": "{}",
								"output_keys": "NatCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocorre",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_nature",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCORRE",
							"baseParameters": {
								"read_mode_ocorre": "delta",
								"input_name_ocorre": "dbo.OCORRE",
								"input_path_ocorre": "camada_prata/sgr/dbo.OCORRE/pont/",
								"input_options_ocorre": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCORRE/",
								"output_name": "dbo_ocorre",
								"output_options": "{}",
								"output_keys": "OcoCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocorre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVEI",
							"baseParameters": {
								"read_mode_ocovei": "delta",
								"input_name_ocovei": "dbo.OCOVEI",
								"input_path_ocovei": "camada_prata/sgr/dbo.OCOVEI/pont/",
								"input_options_ocovei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVEI/",
								"output_name": "dbo_ocovei",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VeiPlaca,ModCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIA",
							"baseParameters": {
								"read_mode_ocovia": "delta",
								"input_name_ocovia": "dbo.OCOVIA",
								"input_path_ocovia": "camada_prata/sgr/dbo.OCOVIA/pont/",
								"input_options_ocovia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIA/",
								"output_name": "dbo_ocovia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,ViaCodigo,VtoDatAcio,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_ocovit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.OCOVIT",
							"baseParameters": {
								"read_mode_ocovit": "delta",
								"input_name_ocovit": "dbo.OCOVIT",
								"input_path_ocovit": "camada_prata/sgr/dbo.OCOVIT/pont/",
								"input_options_ocovit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.OCOVIT/",
								"output_name": "dbo_ocovit",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VitSequenc,VitNome,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_origem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_ocovit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.ORIGEM",
							"baseParameters": {
								"read_mode_origem": "delta",
								"input_name_origem": "dbo.ORIGEM",
								"input_path_origem": "camada_prata/sgr/dbo.ORIGEM/pont/",
								"input_options_origem": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.ORIGEM/",
								"output_name": "dbo_origem",
								"output_options": "{}",
								"output_keys": "OriCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_sentid",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_origem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.SENTID",
							"baseParameters": {
								"read_mode_sentid": "delta",
								"input_name_sentid": "dbo.SENTID",
								"input_path_sentid": "camada_prata/sgr/dbo.SENTID/pont/",
								"input_options_sentid": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.SENTID/",
								"output_name": "dbo_sentid",
								"output_options": "{}",
								"output_keys": "SenCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipate",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_sentid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPATE",
							"baseParameters": {
								"read_mode_tipate": "delta",
								"input_name_tipate": "dbo.TIPATE",
								"input_path_tipate": "camada_prata/sgr/dbo.TIPATE/pont/",
								"input_options_tipate": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPATE/",
								"output_name": "dbo_tipate",
								"output_options": "{}",
								"output_keys": "TpaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvei",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVEI",
							"baseParameters": {
								"read_mode_tipvei": "delta",
								"input_name_tipvei": "dbo.TIPVEI",
								"input_path_tipvei": "camada_prata/sgr/dbo.TIPVEI/pont/",
								"input_options_tipvei": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVEI/",
								"output_name": "dbo_tipvei",
								"output_options": "{}",
								"output_keys": "TipVeiCod,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvei",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIA",
							"baseParameters": {
								"read_mode_tipvia": "delta",
								"input_name_tipvia": "dbo.TIPVIA",
								"input_path_tipvia": "camada_prata/sgr/dbo.TIPVIA/pont/",
								"input_options_tipvia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIA/",
								"output_name": "dbo_tipvia",
								"output_options": "{}",
								"output_keys": "TviCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_tipvit",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.TIPVIT",
							"baseParameters": {
								"read_mode_tipvit": "delta",
								"input_name_tipvit": "dbo.TIPVIT",
								"input_path_tipvit": "camada_prata/sgr/dbo.TIPVIT/pont/",
								"input_options_tipvit": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.TIPVIT/",
								"output_name": "dbo_tipvit",
								"output_options": "{}",
								"output_keys": "TpvCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_veivia",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_tipvit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VEIVIA",
							"baseParameters": {
								"read_mode_veivia": "delta",
								"input_name_veivia": "dbo.VEIVIA",
								"input_path_veivia": "camada_prata/sgr/dbo.VEIVIA/pont/",
								"input_options_veivia": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VEIVIA/",
								"output_name": "dbo_veivia",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,VeiPlaca,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_viatur",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_veivia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VIATUR",
							"baseParameters": {
								"read_mode_viatur": "delta",
								"input_name_viatur": "dbo.VIATUR",
								"input_path_viatur": "camada_prata/sgr/dbo.VIATUR/pont/",
								"input_options_viatur": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VIATUR/",
								"output_name": "dbo_viatur",
								"output_options": "{}",
								"output_keys": "ViaCodigo,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_vitamb",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_viatur",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/SGR/dbo.VITAMB",
							"baseParameters": {
								"read_mode_vitamb": "delta",
								"input_name_vitamb": "dbo.VITAMB",
								"input_path_vitamb": "camada_prata/sgr/dbo.VITAMB/pont/",
								"input_options_vitamb": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/sgr/dbo.VITAMB/",
								"output_name": "dbo_vitamb",
								"output_options": "{}",
								"output_keys": "OcoCodigo,VtoSequenc,OcoVitima,Unidade_dw",
								"catalog": "hive_metastore",
								"schema": "sgr"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "SGR/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tolln3_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas diárias da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_pagamento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.PAGAMENTO",
							"baseParameters": {
								"read_mode_pagamento": "delta",
								"input_name_pagamento": "dbo.PAGAMENTO",
								"input_path_pagamento": "camada_prata/tolln3/dbo.PAGAMENTO/diaria/",
								"input_options_pagamento": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.PAGAMENTO/diaria/",
								"output_name": "dbo_pagamento",
								"output_options": "{}",
								"output_keys": "ID_PAGAMENTO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLN3/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tolln3_mensal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas mensais da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_transito_fechamento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.TRANSITO_FECHAMENTO",
							"baseParameters": {
								"read_mode_transito": "delta",
								"input_name_transito": "dbo.TRANSITO_FECHAMENTO",
								"input_path_transito": "camada_prata/tolln3/dbo.TRANSITO_FECHAMENTO/mensal/",
								"input_options_transito": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.TRANSITO_FECHAMENTO/mensal/",
								"output_name": "dbo_transito_fechamento",
								"output_options": "{}",
								"output_keys": "ID_TRANSITO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLN3/MENSAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tolln3_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebook no Databricks para processamento das tabelas semanais da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dbo_isento",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.ISENTO",
							"baseParameters": {
								"read_mode_isento": "delta",
								"input_name_isento": "dbo.ISENTO",
								"input_path_isento": "camada_prata/tolln3/dbo.ISENTO/semanal/",
								"input_options_isento": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.ISENTO/semanal/",
								"output_name": "dbo_isento",
								"output_options": "{}",
								"output_keys": "CD_ISENTO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_isento_praca",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_isento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.ISENTO_PRACA",
							"baseParameters": {
								"read_mode_isento_praca": "delta",
								"input_name_isento_praca": "dbo.ISENTO_PRACA",
								"input_path_isento_praca": "camada_prata/tolln3/dbo.ISENTO_PRACA/semanal/",
								"input_options_isento_praca": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.ISENTO_PRACA/semanal/",
								"output_name": "dbo_isento_praca",
								"output_options": "{}",
								"output_keys": "CD_ISENTO_PRACA",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_motivo_passagem",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_isento_praca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.MOTIVO_PASSAGEM_GRATUITA",
							"baseParameters": {
								"read_mode_motivo_passagem_gratuita": "delta",
								"input_name_motivo_passagem_gratuita": "dbo.MOTIVO_PASSAGEM_GRATUITA",
								"input_path_motivo_passagem_gratuita": "camada_prata/tolln3/dbo.MOTIVO_PASSAGEM_GRATUITA/semanal/",
								"input_options_motivo_passagem_gratuita": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.MOTIVO_PASSAGEM_GRATUITA/semanal/",
								"output_name": "dbo_motivo_passagem_gratuita",
								"output_options": "{}",
								"output_keys": "CD_MOTIVO_PASSAGEM_GRATUITA",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_categoria",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_motivo_passagem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.CATEGORIA",
							"baseParameters": {
								"read_mode_categoria": "delta",
								"input_name_categoria": "dbo.CATEGORIA",
								"input_path_categoria": "camada_prata/tolln3/dbo.CATEGORIA/semanal/",
								"input_options_categoria": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.CATEGORIA/semanal/",
								"output_name": "dbo_categoria",
								"output_options": "{}",
								"output_keys": "CD_CATEG",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_concessao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_categoria",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.CONCESSAO",
							"baseParameters": {
								"read_mode_concessao": "delta",
								"input_name_concessao": "dbo.CONCESSAO",
								"input_path_concessao": "camada_prata/tolln3/dbo.CONCESSAO/semanal/",
								"input_options_concessao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.CONCESSAO/semanal/",
								"output_name": "dbo_concessao",
								"output_options": "{}",
								"output_keys": "CD_CONCESSAO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_cp_subtpo_pgto",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_concessao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.CP_SUBTPO_PGTO",
							"baseParameters": {
								"read_mode_cp_subtipo_pgto": "delta",
								"input_name_cp_subtipo_pgto": "dbo.CP_SUBTPO_PGTO",
								"input_path_cp_subtipo_pgto": "camada_prata/tolln3/dbo.CP_SUBTPO_PGTO/semanal/",
								"input_options_cp_subtipo_pgto": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.CP_SUBTPO_PGTO/semanal/",
								"output_name": "dbo_cp_subtipo_pgto",
								"output_options": "{}",
								"output_keys": "CD_SUBTPO_PGTO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_cp_tipo_pista",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_cp_subtpo_pgto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.CP_TIPO_PISTA",
							"baseParameters": {
								"read_mode_cp_tipo_pista": "delta",
								"input_name_cp_tipo_pista": "dbo.CP_TIPO_PISTA",
								"input_path_cp_tipo_pista": "camada_prata/tolln3/dbo.CP_TIPO_PISTA/semanal/",
								"input_options_cp_tipo_pista": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.CP_TIPO_PISTA/semanal/",
								"output_name": "dbo_cp_tipo_pista",
								"output_options": "{}",
								"output_keys": "CD_TPO_PISTA",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_cp_tpo_pgto",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_cp_tipo_pista",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.CP_TPO_PGTO",
							"baseParameters": {
								"read_mode_cp_tpo_pgto": "delta",
								"input_name_cp_tpo_pgto": "dbo.CP_TPO_PGTO",
								"input_path_cp_tpo_pgto": "camada_prata/tolln3/dbo.CP_TPO_PGTO/semanal/",
								"input_options_cp_tpo_pgto": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.CP_TPO_PGTO/semanal/",
								"output_name": "dbo_cp_tpo_pgto",
								"output_options": "{}",
								"output_keys": "CD_TPO_PGTO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_dim_tipo_pagto",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_cp_tpo_pgto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.DIM_TIPO_PAGTO",
							"baseParameters": {
								"read_mode_dim_tipo_pagto": "delta",
								"input_name_dim_tipo_pagto": "dbo.DIM_TIPO_PAGTO",
								"input_path_dim_tipo_pagto": "camada_prata/tolln3/dbo.DIM_TIPO_PAGTO/semanal/",
								"input_options_dim_tipo_pagto": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.DIM_TIPO_PAGTO/semanal/",
								"output_name": "dbo_dim_tipo_pagto",
								"output_options": "{}",
								"output_keys": "CD_TPO_PGTO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_osa",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_dim_tipo_pagto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.OSA",
							"baseParameters": {
								"read_mode_osa": "delta",
								"input_name_osa": "dbo.OSA",
								"input_path_osa": "camada_prata/tolln3/dbo.OSA/semanal/",
								"input_options_osa": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.OSA/semanal/",
								"output_name": "dbo_osa",
								"output_options": "{}",
								"output_keys": "ID_OSA",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_osa_codigo",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_osa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.OSA_CODIGO",
							"baseParameters": {
								"read_mode_osa_codigo": "delta",
								"input_name_osa_codigo": "dbo.OSA_CODIGO",
								"input_path_osa_codigo": "camada_prata/tolln3/dbo.OSA_CODIGO/semanal/",
								"input_options_osa_codigo": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.OSA_CODIGO/semanal/",
								"output_name": "dbo_osa_codigo",
								"output_options": "{}",
								"output_keys": "CD_CODIGO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_pista",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_osa_codigo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.PISTA",
							"baseParameters": {
								"read_mode_pista": "delta",
								"input_name_pista": "dbo.PISTA",
								"input_path_pista": "camada_prata/tolln3/dbo.PISTA/semanal/",
								"input_options_pista": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.PISTA/semanal/",
								"output_name": "dbo_pista",
								"output_options": "{}",
								"output_keys": "CD_PISTA",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_praca",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_pista",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.PRACA",
							"baseParameters": {
								"read_mode_praca": "delta",
								"input_name_praca": "dbo.PRACA",
								"input_path_praca": "camada_prata/tolln3/dbo.PRACA/semanal/",
								"input_options_praca": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.PRACA/semanal/",
								"output_name": "dbo_praca",
								"output_options": "{}",
								"output_keys": "CD_PRACA",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dbo_cp_classificao_desconto",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dbo_praca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLN3/dbo.CP_CLASSIFICAO_DESCONTO",
							"baseParameters": {
								"read_mode_cp_classificao_desconto": "delta",
								"input_name_cp_classificao_desconto": "dbo.CP_CLASSIFICAO_DESCONTO",
								"input_path_cp_classificao_desconto": "camada_prata/tolln3/dbo.CP_CLASSIFICAO_DESCONTO/semanal/",
								"input_options_cp_classificao_desconto": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tolln3/dbo.CP_CLASSIFICAO_DESCONTO/semanal/",
								"output_name": "dbo_cp_classificao_desconto",
								"output_options": "{}",
								"output_keys": "CD_CLASSIFICACAO_DESCONTO",
								"catalog": "hive_metastore",
								"schema": "toll_n3"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLN3/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tollpackbi_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebooks no Databricks para processamento das tabelas diárias da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_fact_extrato_operacional",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.FACT_EXTRATO_OPERACIONAL",
							"baseParameters": {
								"read_mode_fact_extrato_operacional": "delta",
								"input_name_fact_extrato_operacional": "dbo.FACT_EXTRATO_OPERACIONAL",
								"input_path_fact_extrato_operacional": "camada_prata/tollpackbi/dbo.FACT_EXTRATO_OPERACIONAL/diaria/",
								"input_options_fact_extrato_operacional": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.FACT_EXTRATO_OPERACIONAL/diaria/",
								"output_name": "dbo_fact_extrato_operacional",
								"output_options": "{}",
								"output_keys": " ",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLPACKBI/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tollpackbi_incr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebooks no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_fact_extrato_trafego",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.FACT_EXTRATO_TRAFEGO",
							"baseParameters": {
								"read_mode_fact_extrato_trafego": "delta",
								"input_name_fact_extrato_trafego": "dbo.FACT_EXTRATO_TRAFEGO",
								"input_path_fact_extrato_trafego": "camada_prata/tollpackbi/dbo.FACT_EXTRATO_TRAFEGO/incremental/",
								"input_options_fact_extrato_trafego": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.FACT_EXTRATO_TRAFEGO/incremental/",
								"output_name": "dbo_fact_extrato_trafego",
								"output_options": "{}",
								"output_keys": " ",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLPACKBI/INCREMENTAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tollpackbi_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebooks no Databricks para processamento das tabelas semanais da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dim_categoria",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_CATEGORIA",
							"baseParameters": {
								"read_mode_dim_categoria": "delta",
								"input_name_dim_categoria": "dbo.DIM_CATEGORIA",
								"input_path_dim_categoria": "camada_prata/tollpackbi/dbo.DIM_CATEGORIA/semanal/",
								"input_options_dim_categoria": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_CATEGORIA/semanal/",
								"output_name": "dbo_dim_categoria",
								"output_options": "{}",
								"output_keys": "CD_CATEG",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_classificao_desconto",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_categoria",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_CLASSIFICAO_DESCONTO",
							"baseParameters": {
								"read_mode_dim_classificao_desconto": "delta",
								"input_name_dim_classificao_desconto": "dbo.DIM_CLASSIFICAO_DESCONTO",
								"input_path_dim_classificao_desconto": "camada_prata/tollpackbi/dbo.DIM_CLASSIFICAO_DESCONTO/semanal/",
								"input_options_dim_classificao_desconto": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_CLASSIFICAO_DESCONTO/semanal/",
								"output_name": "dbo_dim_classificao_desconto",
								"output_options": "{}",
								"output_keys": "CD_CLASSIFICACAO_DESCONTO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_concessao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_classificao_desconto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_CONCESSAO",
							"baseParameters": {
								"read_mode_dim_concessao": "delta",
								"input_name_dim_concessao": "dbo.DIM_CONCESSAO",
								"input_path_dim_concessao": "camada_prata/tollpackbi/dbo.DIM_CONCESSAO/semanal/",
								"input_options_dim_concessao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_CONCESSAO/semanal/",
								"output_name": "dbo_dim_concessao",
								"output_options": "{}",
								"output_keys": "CD_CONCESSAO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_operador",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_concessao",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_OPERADOR",
							"baseParameters": {
								"read_mode_dim_operador": "delta",
								"input_name_dim_operador": "dbo.DIM_OPERADOR",
								"input_path_dim_operador": "camada_prata/tollpackbi/dbo.DIM_OPERADOR/semanal/",
								"input_options_dim_operador": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_OPERADOR/semanal/",
								"output_name": "dbo_dim_operador",
								"output_options": "{}",
								"output_keys": "CD_OPERADOR_SISTEMA",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_pista",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_operador",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_PISTA",
							"baseParameters": {
								"read_mode_dim_pista": "delta",
								"input_name_dim_pista": "dbo.DIM_PISTA",
								"input_path_dim_pista": "camada_prata/tollpackbi/dbo.DIM_PISTA/semanal/",
								"input_options_dim_pista": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_PISTA/semanal/",
								"output_name": "dbo_dim_pista",
								"output_options": "{}",
								"output_keys": "CD_PISTA",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_praca",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_pista",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_PRACA",
							"baseParameters": {
								"read_mode_dim_praca": "delta",
								"input_name_dim_praca": "dbo.DIM_PRACA",
								"input_path_dim_praca": "camada_prata/tollpackbi/dbo.DIM_PRACA/semanal/",
								"input_options_dim_praca": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_PRACA/semanal/",
								"output_name": "dbo_dim_praca",
								"output_options": "{}",
								"output_keys": "CD_PRACA",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_sentido",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_praca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_SENTIDO",
							"baseParameters": {
								"read_mode_dim_sentido": "delta",
								"input_name_dim_sentido": "dbo.DIM_SENTIDO",
								"input_path_dim_sentido": "camada_prata/tollpackbi/dbo.DIM_SENTIDO/semanal/",
								"input_options_dim_sentido": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_SENTIDO/semanal/",
								"output_name": "dbo_dim_sentido",
								"output_options": "{}",
								"output_keys": "CD_SENTIDO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_tipo_pagto",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_sentido",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_TIPO_PAGTO",
							"baseParameters": {
								"read_mode_dim_tipo_pagto": "delta",
								"input_name_dim_tipo_pagto": "dbo.DIM_TIPO_PAGTO",
								"input_path_dim_tipo_pagto": "camada_prata/tollpackbi/dbo.DIM_TIPO_PAGTO/semanal/",
								"input_options_dim_tipo_pagto": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_TIPO_PAGTO/semanal/",
								"output_name": "dbo_dim_tipo_pagto",
								"output_options": "{}",
								"output_keys": "CD_TPO_PGTO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "prata_ouro_dim_tipo_validacao",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "prata_ouro_dim_tipo_pagto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_TIPO_VALIDACAO",
							"baseParameters": {
								"read_mode_dim_tipo_validacao": "delta",
								"input_name_dim_tipo_validacao": "dbo.DIM_TIPO_VALIDACAO",
								"input_path_dim_tipo_validacao": "camada_prata/tollpackbi/dbo.DIM_TIPO_VALIDACAO/semanal/",
								"input_options_dim_tipo_validacao": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_TIPO_VALIDACAO/semanal/",
								"output_name": "dbo_dim_tipo_validacao",
								"output_options": "{}",
								"output_keys": "CD_TIPO_VALIDACAO",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLPACKBI/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_ouro_tollpackbi_tudo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de notebooks no Databricks para processamento das tabelas da camada prata para ouro.",
				"activities": [
					{
						"name": "prata_ouro_dim_operador",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/03-OURO/TOLLPACKBI/dbo.DIM_OPERADOR",
							"baseParameters": {
								"read_mode_dim_operador": "delta",
								"input_name_dim_operador": "dbo.DIM_OPERADOR",
								"input_path_dim_operador": "camada_prata/tollpackbi/dbo.DIM_OPERADOR/tudo/",
								"input_options_dim_operador": "{}",
								"write_mode_output": "upsert",
								"output_path": "camada_ouro/tollpackbi/dbo.DIM_OPERADOR/tudo/",
								"output_name": "dbo_dim_operador",
								"output_options": "{}",
								"output_keys": " ",
								"catalog": "hive_metastore",
								"schema": "tollpackbi"
							}
						},
						"linkedServiceName": {
							"referenceName": "dbrk_eco_ls",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "TOLLPACKBI/TUDO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-19T15:29:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/dbrk_eco_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_report_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_ft_fornecedor_compras",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_ft_fornecedor_compras",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ouro_report_fornecedor",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_ft_fornecedor_compras",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ouro_report_fornecedor",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00_WORKFLOW/PRATA_REPORT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T23:01:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_ft_fornecedor_compras')]",
				"[concat(variables('factoryId'), '/pipelines/ouro_report_fornecedor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prata_report_juridico')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "prata_ouro_juridico_dm_area_direito",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_area_direito",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_empresa",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_empresa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_origem_causa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_empresa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_origem_causa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_parte_contraria",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_tipo_motivo_encerramento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_parte_contraria",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_processo_resultado",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_processo_resultado",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_processo_status",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_processo_status",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_tipo_motivo_encerramento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_processo_status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_tipo_motivo_encerramento",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_unidade",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_area_direito",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_unidade",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_ft_processo_pagamento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_processo_resultado",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "prata_ouro_juridico_dm_grupo_empresa",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "prata_ouro_juridico_dm_parte_contraria",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_ft_processo_pagamento",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "prata_ouro_juridico_dm_grupo_empresa",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "prata_ouro_juridico_dm_origem_causa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "prata_ouro_juridico_dm_grupo_empresa",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "00_WORKFLOW/PRATA_REPORT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T23:01:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_area_direito')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_empresa')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_origem_causa')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_parte_contraria')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_processo_resultado')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_processo_status')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_tipo_motivo_encerramento')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_unidade')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_ft_processo_pagamento')]",
				"[concat(variables('factoryId'), '/pipelines/prata_ouro_juridico_dm_grupo_empresa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "camada_bronze/sharepoint/carregadores_eletricos/processar",
						"fileSystem": "ecsanalyticsfs"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": "ecsanalyticsfs"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"commitInfo": {
							"type": "object",
							"properties": {
								"timestamp": {
									"type": "integer"
								},
								"userId": {
									"type": "string"
								},
								"userName": {
									"type": "string"
								},
								"operation": {
									"type": "string"
								},
								"operationParameters": {
									"type": "object",
									"properties": {
										"mode": {
											"type": "string"
										},
										"partitionBy": {
											"type": "string"
										},
										"predicate": {
											"type": "string"
										},
										"matchedPredicates": {
											"type": "string"
										},
										"notMatchedPredicates": {
											"type": "string"
										},
										"notMatchedBySourcePredicates": {
											"type": "string"
										}
									}
								},
								"notebook": {
									"type": "object",
									"properties": {
										"notebookId": {
											"type": "string"
										}
									}
								},
								"clusterId": {
									"type": "string"
								},
								"isolationLevel": {
									"type": "string"
								},
								"isBlindAppend": {
									"type": "boolean"
								},
								"operationMetrics": {
									"type": "object",
									"properties": {
										"numFiles": {
											"type": "string"
										},
										"numOutputRows": {
											"type": "string"
										},
										"numOutputBytes": {
											"type": "string"
										},
										"numTargetRowsCopied": {
											"type": "string"
										},
										"numTargetRowsDeleted": {
											"type": "string"
										},
										"numTargetFilesAdded": {
											"type": "string"
										},
										"numTargetBytesAdded": {
											"type": "string"
										},
										"numTargetBytesRemoved": {
											"type": "string"
										},
										"numTargetDeletionVectorsAdded": {
											"type": "string"
										},
										"numTargetRowsMatchedUpdated": {
											"type": "string"
										},
										"executionTimeMs": {
											"type": "string"
										},
										"numTargetRowsInserted": {
											"type": "string"
										},
										"numTargetRowsMatchedDeleted": {
											"type": "string"
										},
										"scanTimeMs": {
											"type": "string"
										},
										"numTargetRowsUpdated": {
											"type": "string"
										},
										"numTargetDeletionVectorsRemoved": {
											"type": "string"
										},
										"numTargetRowsNotMatchedBySourceUpdated": {
											"type": "string"
										},
										"numTargetChangeFilesAdded": {
											"type": "string"
										},
										"numSourceRows": {
											"type": "string"
										},
										"numTargetFilesRemoved": {
											"type": "string"
										},
										"numTargetRowsNotMatchedBySourceDeleted": {
											"type": "string"
										},
										"rewriteTimeMs": {
											"type": "string"
										}
									}
								},
								"engineInfo": {
									"type": "string"
								},
								"txnId": {
									"type": "string"
								},
								"readVersion": {
									"type": "integer"
								},
								"job": {
									"type": "object",
									"properties": {
										"jobId": {
											"type": "string"
										},
										"jobName": {
											"type": "string"
										},
										"runId": {
											"type": "string"
										},
										"jobOwnerId": {
											"type": "string"
										},
										"triggerType": {
											"type": "string"
										}
									}
								}
							}
						},
						"protocol": {
							"type": "object",
							"properties": {
								"minReaderVersion": {
									"type": "integer"
								},
								"minWriterVersion": {
									"type": "integer"
								}
							}
						},
						"metaData": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"format": {
									"type": "object",
									"properties": {
										"provider": {
											"type": "string"
										},
										"options": {
											"type": "object"
										}
									}
								},
								"schemaString": {
									"type": "string"
								},
								"partitionColumns": {
									"type": "array"
								},
								"configuration": {
									"type": "object",
									"properties": {
										"delta.columnMapping.mode": {
											"type": "string"
										},
										"delta.columnMapping.maxColumnId": {
											"type": "string"
										}
									}
								},
								"createdTime": {
									"type": "integer"
								}
							}
						},
						"add": {
							"type": "object",
							"properties": {
								"path": {
									"type": "string"
								},
								"partitionValues": {
									"type": "object"
								},
								"size": {
									"type": "integer"
								},
								"modificationTime": {
									"type": "integer"
								},
								"dataChange": {
									"type": "boolean"
								},
								"stats": {
									"type": "string"
								},
								"tags": {
									"type": "object",
									"properties": {
										"INSERTION_TIME": {
											"type": "string"
										},
										"MIN_INSERTION_TIME": {
											"type": "string"
										},
										"MAX_INSERTION_TIME": {
											"type": "string"
										},
										"OPTIMIZE_TARGET_SIZE": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CaminhoCamadaBronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"caminho": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().caminho",
							"type": "Expression"
						},
						"fileSystem": "ecsanalyticsfs"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleSapEcc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "oracle_sap_ecc_ls",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/oracle_sap_ecc_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"path": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": "ecsanalyticsfs"
					},
					"compressionCodec": "snappy",
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestHana')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_hana",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pbi": {
						"type": "string"
					},
					"variable": {
						"type": "string",
						"defaultValue": "periodo"
					},
					"date": {
						"type": "string"
					},
					"operator": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().pbi,'?$filter=', dataset().variable, '%20', dataset().operator,'%20', '%27',dataset().date,'%27')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_hana')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestSapSFPWBI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_hana",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pbi": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"operator": {
						"type": "string"
					},
					"variable": {
						"type": "string",
						"defaultValue": "periodo"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().pbi,'?$filter=', dataset().variable, '%20', dataset().operator,'%20', '%27',dataset().date, '%27')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_hana')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestSapSFPWBI04')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_sap_pwbi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"date": {
						"type": "string"
					},
					"pbi": {
						"type": "string"
					},
					"operator": {
						"type": "string"
					},
					"variable": {
						"type": "string",
						"defaultValue": "periodo"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().pbi,'?$filter=', dataset().variable, '%20', dataset().operator,'%20', '%27',dataset().date, '%27','&%24format=json')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_sap_pwbi')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestSapSfDelta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_sap_sf",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string"
					},
					"operator": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"filterVariable": {
						"type": "string"
					},
					"format": {
						"type": "string",
						"defaultValue": "JSON"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().table, '?$filter=', dataset().filterVariable, ' ', dataset().operator, ' ', dataset().date, '&$format=', dataset().format)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_sap_sf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestSapSfFULL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_sap_sf",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string"
					},
					"format": {
						"type": "string",
						"defaultValue": "JSON"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(dataset().table,'?$format=', dataset().format)",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_sap_sf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestSapSfPicklist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "rest_sap_sf",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"picklist": {
						"type": "string"
					},
					"format": {
						"type": "string",
						"defaultValue": "JSON"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('Picklist?$format=JSON&$expand=picklistOptions,picklistOptions/picklistLabels&$select=picklistOptions/id,picklistOptions/externalCode,picklistOptions/picklistLabels/label&$filter=picklistId%20eq%20%27', dataset().picklist,'%27%20and%20picklistOptions/picklistLabels/locale%20eq%20%27pt_BR%27')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/rest_sap_sf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SharepointBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SharepointGrupoecorodovias",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SharepointDominio": {
						"type": "string"
					},
					"SharepointSite": {
						"type": "string"
					},
					"CaminhoRelativo": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@concat(dataset().SharepointSite,'/_api/web/GetFileByServerRelativeUrl(',dataset().SharepointSite,'/',dataset().CaminhoRelativo,')/$value')",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SharepointGrupoecorodovias')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerEcompras')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer_ECompras",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "CD_FORNECEDOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_FAMILIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_FAMILIA_SECUNDARIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_NATUREZA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CPF_CNPJ",
						"type": "varchar"
					},
					{
						"name": "CD_TIPO_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CATEGORIA_SECUNDARIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_SUBCATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RAZAO_SOCIAL",
						"type": "varchar"
					},
					{
						"name": "NOME",
						"type": "varchar"
					},
					{
						"name": "INSCRICAO_ESTADUAL",
						"type": "varchar"
					},
					{
						"name": "INSCRICAO_MUNICIPAL",
						"type": "varchar"
					},
					{
						"name": "CNAE",
						"type": "varchar"
					},
					{
						"name": "RG",
						"type": "varchar"
					},
					{
						"name": "CD_REGIAO_ATUACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TELEFONE",
						"type": "varchar"
					},
					{
						"name": "RAMAL",
						"type": "varchar"
					},
					{
						"name": "EMAIL",
						"type": "varchar"
					},
					{
						"name": "ENDERECO_WEB",
						"type": "varchar"
					},
					{
						"name": "CEP",
						"type": "varchar"
					},
					{
						"name": "ENDERECO",
						"type": "varchar"
					},
					{
						"name": "NUMERO",
						"type": "varchar"
					},
					{
						"name": "COMPLEMENTO",
						"type": "varchar"
					},
					{
						"name": "BAIRRO",
						"type": "varchar"
					},
					{
						"name": "UF",
						"type": "varchar"
					},
					{
						"name": "CIDADE",
						"type": "varchar"
					},
					{
						"name": "CD_OPCAO_TRIBUTARIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_OPCAO_FISCAL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_MODELO_DOCUMENTO_FISCAL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BL_MULTINACIONAL",
						"type": "bit"
					},
					{
						"name": "QTD_COLABORADORES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QTD_TERCEIROS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_BANCO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AGENCIA",
						"type": "varchar"
					},
					{
						"name": "CONTA_CORRENTE",
						"type": "varchar"
					},
					{
						"name": "BL_CADASTRO_LIBERADO",
						"type": "bit"
					},
					{
						"name": "BL_MATRIZ",
						"type": "bit"
					},
					{
						"name": "OBSERVACAO",
						"type": "varchar"
					},
					{
						"name": "BL_COMBATE_CORRUPCAO",
						"type": "bit"
					},
					{
						"name": "BL_RECOMENDACAO",
						"type": "bit"
					},
					{
						"name": "NOME_MEMBRO_RECOMENDACAO",
						"type": "varchar"
					},
					{
						"name": "CARGO_RECOMENDACAO",
						"type": "varchar"
					},
					{
						"name": "CD_UNIDADE_RECOMENDACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_STATUS_HOMOLOGACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_STATUS_INTEGRACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NUMERO_HOMOLOGACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DH_PRIMEIRA_HOMOLOGACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DH_HOMOLOGACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DH_VALIDADE_HOMOLOGACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_USUARIO_CADASTRO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_USUARIO_APROVADOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DH_VALIDADE_BLOQUEIO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_STATUS",
						"type": "bit"
					},
					{
						"name": "DH_TIMESTAMP",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DH_ATUALIZACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CODIGO_SAP",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ALTERACAO_LIBERADA",
						"type": "bit"
					},
					{
						"name": "URL_RELATORIO_HOMOLOGACAO",
						"type": "varchar"
					},
					{
						"name": "BL_TERMO_ACEITO",
						"type": "bit"
					},
					{
						"name": "ETAPA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BL_ETAPAS_CONCLUIDAS",
						"type": "bit"
					},
					{
						"name": "BL_PARTE_RELACIONADA",
						"type": "bit"
					},
					{
						"name": "BL_BLOQUEIO",
						"type": "bit"
					},
					{
						"name": "BL_CADASTRO_EXPRESSO",
						"type": "bit"
					},
					{
						"name": "JUSTIFICATIVA_CADASTRO_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "BL_CADASTRO_EXPRESSO_LIBERADO",
						"type": "bit"
					},
					{
						"name": "CD_GERENTE_RESPONSAVEL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BL_INTERNACIONAL_TRATADO",
						"type": "bit"
					},
					{
						"name": "DH_LIBERACAO_CADASTRO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DIG_AGENCIA",
						"type": "varchar"
					},
					{
						"name": "DIG_CONTA_CORRENTE",
						"type": "varchar"
					},
					{
						"name": "PESO_CORE_BUSINESS",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "BL_CONFIRMACAO_DADOS",
						"type": "bit"
					},
					{
						"name": "IMPORT_DOCUMENTO_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PIS",
						"type": "varchar"
					},
					{
						"name": "DH_NASCIMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SEXO",
						"type": "char"
					},
					{
						"name": "CD_TIPO_AUTONOMO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CODIGO_CBO",
						"type": "char"
					},
					{
						"name": "DH_REHOMOLOGACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BL_CADASTRO_SIMPLIFICADO",
						"type": "bit"
					},
					{
						"name": "BL_CADASTRO_EXCECAO",
						"type": "bit"
					},
					{
						"name": "URL_OUTROS_DOCUMENTOS_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "UNIDADES_CADASTRO_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "CD_TIPO_CADASTRO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BL_NOTIFICACAO_REHOMOLOGACAO",
						"type": "bit"
					},
					{
						"name": "CD_TIPO_BLOQUEIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "URL_DADOS_BANCARIOS_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "URL_DOCUMENTO_APROVACAO_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "CAMINHO_DADOS_BANCARIOS_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "CAMINHO_DOCUMENTO_APROVACAO_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "CAMINHO_OUTROS_DOCUMENTOS_EXPRESSO",
						"type": "varchar"
					},
					{
						"name": "CD_USUARIO_LIBERACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DH_CADASTRO_EXPRESSO_LIBERADO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_PAIS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CODIGO_POSTAL",
						"type": "varchar"
					},
					{
						"name": "BL_INTEGRACAO_SAP_BLOQ",
						"type": "bit"
					},
					{
						"name": "BL_BLOQUEIO_INTEGRACAO",
						"type": "bit"
					},
					{
						"name": "BL_DESBLOQUEIO_INTEGRACAO",
						"type": "bit"
					},
					{
						"name": "DH_VIGENCIA_DIRETORIA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DH_VIGENCIA_COMITE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BL_PAGAMENTO_CARTAO_CORPORATIVO",
						"type": "bit"
					},
					{
						"name": "CD_SUBTIPO_BLOQUEIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BL_LINK_HOMOLOGACAO_ATIVO",
						"type": "bit"
					},
					{
						"name": "BL_TREINAMENTO_CONCLUIDO",
						"type": "bit"
					},
					{
						"name": "BL_CONFIRMACAO_TREINAMENTO_VIA_CARGA",
						"type": "bit"
					},
					{
						"name": "URL_CONSULTA_ESOCIAL",
						"type": "varchar"
					},
					{
						"name": "CAMINHO_CONSULTA_ESOCIAL",
						"type": "varchar"
					},
					{
						"name": "BL_CODIGO_CONDUTA_TERCEIROS",
						"type": "bit"
					},
					{
						"name": "EMAILSECUNDARIO",
						"type": "varchar"
					},
					{
						"name": "CD_USUARIO_ALTERACAO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_ORIGEM_CADASTRO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DH_VALIDADE_COMPLIANCE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "BL_LINK_ATUALIZACAO_PRE_CADASTRO_ATIVO",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer_ECompras')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerJuridico')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server_sistema_juridico",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"table": {
						"type": "string",
						"defaultValue": "EMPRESA"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server_sistema_juridico')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_E050ECER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão ao banco do KCOR para Eco050 e EcoCerrado",
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_E050ECER",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_E050ECER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_E101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_E101",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_E101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_E135')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_E135",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_E135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_EARA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_EARA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_EARA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_ENOR')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_ENOR",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_ENOR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_EPST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_EPST",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_EPST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_ERMIN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_ERMIN",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_ERMIN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_ESUL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão ao banco do KCOR para Ecosul",
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_ESUL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_ESUL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_EVIS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_EVIS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_EVIS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_KCOR_PONT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_KCOR_PONT",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_KCOR_PONT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_CATARATA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_CATARATA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_CATARATA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_E101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_E101",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_E101')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_E135')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão ao banco do SGR para E135",
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_E135",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_E135')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_ECOPARA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_ECOPARA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_ECOPARA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_ECOSUL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_ECOSUL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_ECOSUL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_EPST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_EPST",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_EPST')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_SGR_PONT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Conexao_SGR_PONT",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_SGR_PONT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_TOLLN3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com banco de dados do TOLLN3 no servidor de réplica (03CSRV70)",
				"linkedServiceName": {
					"referenceName": "Conexao_TOLLN3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_TOLLN3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_TOLLPACKBI')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com banco de dados do TOLLPACKBI no servidor de réplica (replican3db.arrecada.corp)",
				"linkedServiceName": {
					"referenceName": "Conexao_TOLLPACKBI_2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Conexao_TOLLPACKBI_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dlPath')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"caminho": {
						"type": "string"
					},
					"arquivo": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().arquivo",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().caminho",
							"type": "Expression"
						},
						"fileSystem": "ecsanalyticsfs"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Planilha de parâmetros",
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_e050ecer.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_e101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_e101.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_e135')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_e135.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_eara')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_eara.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_enor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_enor.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_epst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_epst.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_ermin')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_ermin.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_esul')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_esul.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_evis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_evis.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_kcor_pont')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "kcor_pont.xlsx",
						"folderPath": "camada_bronze/kcor/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_catarata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_catarata.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_e101')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_e101.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_e135')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_e135.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_ecopara')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_ecopara.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_ecosul')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_catarata.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_epst')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_epst.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_evis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_evis.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_sgr_pont')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "sgr_pont.xlsx",
						"folderPath": "camada_bronze/sgr/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_tolln3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tolln3.xlsx",
						"folderPath": "camada_bronze/tolln3/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/planilha_tollpackbi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tollpackbi.xlsx",
						"folderPath": "camada_bronze/tollpackbi/arquivo_parametro",
						"fileSystem": "ecsanalyticsfs"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "tabela",
						"type": "String"
					},
					{
						"name": "campo",
						"type": "String"
					},
					{
						"name": "condicao",
						"type": "String"
					},
					{
						"name": "tipo_tabela",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_E050ECER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Eco050 e EcoCerrado",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_E050ECER_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_E101')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Eco101",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_E101_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_E135')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_E135_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_EARA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Ecovias do Araguaia",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_EARA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_ENOR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Econoroeste",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_ENOR_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_EPST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da EcoPistas",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_EPST_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_ERMIN')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da EcoRioMinas",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_ERMIN_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_ESUL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Ecosul",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_ESUL_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_EVIS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Ecovias",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_EVIS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_KCOR_PONT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base KCOR da Ecoponte",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_KCOR_PONT_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_CATARATA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com fonte de dados SGR Catarata",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_CATARATA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_E101')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base SGR da Eco101",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_E101_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_E135')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base SGR da Eco135",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_E135_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_ECOPARA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base de dados SGR Eco Paraná ",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_ECOPARA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_ECOSUL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base SGR da Ecosul",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_ECOSUL_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_EPST')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base SGR da EcoPistas",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_EPST_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_SGR_PONT')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base SGR da Ecoponte",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_SGR_PONT_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_TOLLN3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base TOLL_N3 (servidor de réplica: 03CSRV166)",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_TOLLN3_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conexao_TOLLPACKBI_2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Conexão com base TOLLPACKBI (servidor de réplica: replican3db.arrecada.corp)",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Conexao_TOLLPACKBI_2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SharepointGrupoecorodovias')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('SharepointGrupoecorodovias_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer_ECompras')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer_ECompras_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dbrk_eco_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-1491396636268421.1.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('dbrk_eco_ls_accessToken')]"
					},
					"existingClusterId": "[parameters('dbrk_eco_ls_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/oracle_sap_ecc_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('oracle_sap_ecc_ls_connectionString')]"
				},
				"connectVia": {
					"referenceName": "Runtime-sgp",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/Runtime-sgp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_hana')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('rest_hana_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('rest_hana_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('rest_hana_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_sap_pwbi')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('rest_sap_pwbi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('rest_sap_pwbi_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('rest_sap_pwbi_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rest_sap_sf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('rest_sap_sf_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('rest_sap_sf_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('rest_sap_sf_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server_sistema_juridico')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('sql_server_sistema_juridico_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ingest_prata_ecompras')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ingest_prata_ecompras",
							"type": "PipelineReference"
						},
						"parameters": {
							"tipo_carga": "[parameters('trg_ingest_prata_ecompras_properties_ingest_prata_ecompras_parameters_tipo_carga')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2023-10-04T02:30:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_prata_ecompras')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ingest_prata_juridico')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ingest_prata_juridico",
							"type": "PipelineReference"
						},
						"parameters": {
							"tipo_carga": "[parameters('trg_ingest_prata_juridico_properties_ingest_prata_juridico_parameters_tipo_carga')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2023-10-05T03:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_prata_juridico')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ingest_prata_sap_ecc')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ingest_prata_sap_ecc",
							"type": "PipelineReference"
						},
						"parameters": {
							"tipo_carga": "[parameters('trg_ingest_prata_sap_ecc_properties_ingest_prata_sap_ecc_parameters_tipo_carga')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 24,
						"startTime": "2023-10-04T02:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ingest_prata_sap_ecc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ingest_report_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "prata_report_fornecedor",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-11-02T05:30:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								5
							],
							"monthDays": [
								1,
								2,
								3
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/prata_report_fornecedor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_prata_ingest_juridico')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "prata_report_juridico",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-11-02T05:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								5
							],
							"monthDays": [
								1,
								2,
								3
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/prata_report_juridico')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Runtime-sgp')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('Runtime-sgp_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}