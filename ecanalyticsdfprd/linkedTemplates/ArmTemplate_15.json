{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "ecanalyticsdfprd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E135_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_e135",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EARA_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_eara",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ENOR_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_enor",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EPST_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_epst",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ERMIN_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_ermin",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ESUL_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecosul para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_ESUL",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_esul",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EVIS_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_EVIS",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_evis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_PONT_DIN_AUX')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "IngerirTabelaCargaCompletaIncr",
						"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetarValorCondicaoIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', pipeline().parameters.nome_tabela, ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_KCOR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": {
										"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
										"type": "Expression"
									},
									"arquivo": {
										"value": "@concat(pipeline().parameters.nome_tabela,'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LerArquivoParametroIncr",
						"description": "Lê o arquivo de parâmetro",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "planilha_kcor_pont",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorCondicaoIncr",
						"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VerificarTabelaCargaParcialIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SetaCondicaoWhere_Default_copy1",
									"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "1=1",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "VerificarTabelaCargaParcialIncr",
						"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LerArquivoParametroIncr",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LerArquivoParametroIncr').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().tabela, pipeline().parameters.nome_tabela),equals(pipeline().parameters.cargacompleta, false))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					},
					"nome_tabela": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TOLLN3_SEM_PASSO1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão semanal de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('CATEGORIA'\n,'CONCESSAO'\n,'CP_SUBTPO_PGTO'\n,'CP_TIPO_PISTA'\n,'CP_TPO_PGTO'\n,'DIM_TIPO_PAGTO'\n,'OSA'\n,'OSA_CODIGO'\n,'PISTA'\n,'PRACA')\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaSemanal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/tabela_',  pipeline().parameters.atualizacao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T14:41:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_ecompras_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "IfConditionIncremental",
						"description": "Checa o tipo de carga a ser executada (Incremental ou Total)",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.tipo_carga, 'incremental')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CopyDataFromEcomprasFull",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerEcompras",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "FORNECEDOR"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/ecompras/fornecedor",
												"arquivo": {
													"value": "@concat('ecompras_fornecedor__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataFromEcomprasIncremental",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT *\nFROM e_compras.dbo.FORNECEDOR\nWHERE DH_ATUALIZACAO >= CONVERT(DATETIMEOFFSET, SWITCHOFFSET(CONVERT(DATETIMEOFFSET, GETUTCDATE()), '-03:00'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerEcompras",
											"type": "DatasetReference",
											"parameters": {
												"schema": "dbo",
												"table": "FORNECEDOR"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": "camada_bronze/ecompras/fornecedor",
												"arquivo": {
													"value": "@concat('ecompras_fornecedor__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tipo_carga": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_INGESTAO/ECOMPRAS"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-29T18:05:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_ecompras_vw_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyDataFromEcomprasVwFornecedor",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerEcompras",
								"type": "DatasetReference",
								"parameters": {
									"schema": "dbo",
									"table": "VW_FORNECEDOR_PAINEL_CONTROLE_ADMIN"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dlPath",
								"type": "DatasetReference",
								"parameters": {
									"caminho": "camada_bronze/ecompras/vw_fornecedor",
									"arquivo": {
										"value": "@concat('ecompras_vw_fornecedor__', formatDateTime(utcNow(),'yyyyMMddHHmmss'))",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "01_INGESTAO/ECOMPRAS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T21:44:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e050ecer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E050ECER",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T17:46:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e050ecer_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E050ECER",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e050ecer",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E050ECER"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e101')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ',variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T17:56:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e101_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ',variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e101",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E101"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T21:58:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e135')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T18:15:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_e135_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_E135",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_e135",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/E135"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_eara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n\t\t\t\t\t,'TabAnimais'\n\t\t\t\t\t,'TabRecursosCoberturas'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T18:48:17Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_eara_flat_file')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TAuxSentidos',\n\t\t\t\t\t'TAuxTiposAcidentes',\n\t\t\t\t\t'TAuxTiposAtendimentos',\n\t\t\t\t\t'TAuxTiposOcorrencias',\n\t\t\t\t\t'TAuxTiposRecursos',\n\t\t\t\t\t'TAuxTiposVeiculos',\n\t\t\t\t\t'TAuxVitPosicoes',\n\t\t\t\t\t'TAuxVitSituacoes',\n\t\t\t\t\t'TAuxCondicoesMeteorologicas',\n\t\t\t\t\t'TAuxCausasProvaveis',\n\t\t\t\t\t'TAuxOrigemChamado',\n\t\t\t\t\t'TAuxConservGestores',\n\t\t\t\t\t'TAuxConservStatus',\n\t\t\t\t\t'TAuxConservTipos',\n\t\t\t\t\t'TAuxConservOrigem',\n\t\t\t\t\t'TAuxAnimais',\n\t\t\t\t\t'TAuxAnimaisDestinos',\n\t\t\t\t\t'TAuxTiposProvAnimais',\n\t\t\t\t\t'TAuxFuncionarios',\n\t\t\t\t\t'TAuxRodovias'\n\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_EARA",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_eara",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"concessao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE/EARA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_kcor_incr_enor')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Econoroeste para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\r\nFROM SYS.TABLES TB1\r\nINNER JOIN SYS.SCHEMAS TB2\r\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\r\nWHERE TB1.NAME IN ('TabAcidentes'\r\n\t\t\t\t\t,'TabOcorrencias'\r\n\t\t\t\t\t,'TabRecursosAcionados'\r\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\r\n\t\t\t\t\t,'TabVitimas'\r\n\t\t\t\t\t,'TauxRecursos'\r\n\t\t\t\t\t,'TabConservacao'\r\n\t\t\t\t\t,'TabAnimais'\r\n\t\t\t\t\t,'TabRecursosCoberturas'\r\n)\r\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompletaIncr",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicaoIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_KCOR_ENOR",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/kcor/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroIncr",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_kcor_enor",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicaoIncr",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcialIncr').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default_copy1",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcialIncr').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcialIncr",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroIncr",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroIncr').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/ENOR"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-11T19:08:27Z"
			},
			"dependsOn": []
		}
	]
}