{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "ecanalyticsdfprd"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_evis')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da Ecovias para camada bronze",
				"activities": [
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tabelas')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_E101",
											"type": "DatasetReference",
											"parameters": {
												"schema": "ACAUA",
												"table": {
													"value": "@variables('nome_tabela')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_pasta') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_pasta'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Definir pasta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_evis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_pasta')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Definir pasta",
									"description": "Corrige o nome da pasta referente à tabela",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_pasta",
										"value": {
											"value": "@concat( 'dbo.', split(variables('nome_tabela'), '.')[1])",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "SetarTabelas",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabelas",
							"value": [
								"ACAUA.ATIVID",
								"ACAUA.CAUSAS",
								"ACAUA.CONMET",
								"ACAUA.CTRVIA",
								"ACAUA.FUNCIO",
								"ACAUA.GRAVID",
								"ACAUA.GRUNAT",
								"ACAUA.MODVEI",
								"ACAUA.NATURE",
								"ACAUA.OCORRE",
								"ACAUA.OCOVEI",
								"ACAUA.OCOVIA",
								"ACAUA.OCOVIT",
								"ACAUA.ORIGEM",
								"ACAUA.SENTID",
								"ACAUA.TIPATE",
								"ACAUA.TIPVEI",
								"ACAUA.TIPVIA",
								"ACAUA.TIPVIT",
								"ACAUA.VEIVIA",
								"ACAUA.VIATUR",
								"ACAUA.VITAMB"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabelas": {
						"type": "Array"
					},
					"nome_pasta": {
						"type": "String"
					}
				},
				"folder": {
					"name": "SGR/EVIS"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T19:03:33Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_sgr_pont')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do SGR da Ecoponte para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ATIVID'\n\t\t\t\t\t, 'CAUSAS'\n\t\t\t\t\t, 'CONMET'\n\t\t\t\t\t, 'CTRVIA'\n\t\t\t\t\t, 'FUNCIO'\n\t\t\t\t\t, 'GRAVID'\n\t\t\t\t\t, 'GRUNAT'\n\t\t\t\t\t, 'MODVEI'\n\t\t\t\t\t, 'NATURE'\n\t\t\t\t\t, 'OCORRE'\n\t\t\t\t\t, 'OCOVEI'\n\t\t\t\t\t, 'OCOVIA'\n\t\t\t\t\t, 'OCOVIT'\n\t\t\t\t\t, 'ORIGEM'\n\t\t\t\t\t, 'SENTID'\n\t\t\t\t\t, 'TIPATE'\n\t\t\t\t\t, 'TIPVEI'\n\t\t\t\t\t, 'TIPVIA'\n\t\t\t\t\t, 'TIPVIT'\n\t\t\t\t\t, 'VEIVIA'\n\t\t\t\t\t, 'VIATUR'\n\t\t\t\t\t, 'VITAMB'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_SGR_PONT",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaCompleta",
									"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetarValorCondicao",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p11))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_SGR_PONT",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/sgr/',variables('nome_tabela') , '/' ,  pipeline().parameters.concessao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Lê o arquivo de parâmetro",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_sgr_pont",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetarValorCondicao",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro (condição True). Caso contrário, então \"condicao_where\" recebe valor 1 = 1 (condição False).",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('VerificarTabelaCargaParcial').output.FilteredItemsCount,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "SetaCondicaoWhere_Default",
												"description": "Seta a variável \"condicao_where\" com o valor 1 = 1. Ou seja, será necessário realizar a carga completa ou de D-X da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "1=1",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "SetaCondicaoWhere",
												"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "condicao_where",
													"value": {
														"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@and(equals(item().tabela, variables('nome_tabela')),equals(pipeline().parameters.cargacompleta, false))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "SGR/PONT"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-17T19:04:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tolln3_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão diaria de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('PAGAMENTO'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroDia",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcialDia",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroDia').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialDia",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialDia').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T19:24:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tolln3_mensal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão mensal de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TRANSITO_FECHAMENTO'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaMensal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametroMes",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcialMes",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametroMes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametroMes').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Caso o nome da tabela em processamento esteja no arquivo de parâmetro, então atualiza a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro ",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcialMes",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcialMes').output.value[0].condicao",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/MENSAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-04T20:19:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tolln3_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão semanal de dados on-premises de tabelas do TOLL N3 (03CSRV70) para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('ISENTO'\n                , 'ISENTO_PRACA'\n                , 'MOTIVO_PASSAGEM_GRATUITA'\n                , 'CATEGORIA'\n                , 'CONCESSAO'\n                , 'CP_SUBTPO_PGTO'\n                , 'CP_TIPO_PISTA'\n                , 'CP_TPO_PGTO'\n                , 'DIM_TIPO_PAGTO'\n                , 'OSA'\n                , 'OSA_CODIGO'\n                , 'PRACA'\n                , 'PISTA'\n                , 'CP_CLASSIFICAO_DESCONTO'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLN3",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaSemanal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLN3",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tolln3/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tolln3",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLN3/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-05T17:09:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão diária de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('FACT_EXTRATO_OPERACIONAL'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/DIARIA"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T18:58:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_incr')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão incremental de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('FACT_EXTRATO_TRAFEGO')\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'), ' WHERE ', replace(variables('condicao_where'), '$PARAMETRO$', pipeline().parameters.dias_atualizacao_p1))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/INCREMENTAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T19:03:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão semanal de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('DIM_CONCESSAO'\n                    , 'DIM_SENTIDO'\n                    , 'DIM_TIPO_VALIDACAO'\n                    , 'DIM_CLASSIFICAO_DESCONTO'\n                    , 'DIM_PISTA'\n                    , 'DIM_PRACA'\n                    , 'DIM_CATEGORIA'\n                    , 'DIM_TIPO_PAGTO'\n                    , 'DIM_OPERADOR'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaDiaria",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "x",
												"table": "x"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/SEMANAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-06T19:08:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingest_tollpackbi_tudo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de tabelas do TOLLPACKBI para camada bronze.",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('DIM_OPERADOR')\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_TOLLPACKBI",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IngerirTabelaCargaTotal",
									"description": "Realiza a ingestão da carga de dado.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SetaCondicaoWhere",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT *, getdate() AS data_ingestao FROM ', variables('nome_tabela'))",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "dataset_TOLLPACKBI",
											"type": "DatasetReference",
											"parameters": {
												"schema": "X",
												"table": "X"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dlPath",
											"type": "DatasetReference",
											"parameters": {
												"caminho": {
													"value": "@concat('camada_bronze/tollpackbi/',variables('nome_tabela') , '/' ,  pipeline().parameters.atualizacao, '/')",
													"type": "Expression"
												},
												"arquivo": {
													"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcNow(),'yyyyMMddHHmmss'),'.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "LerArquivoParametro",
									"description": "Verifica os parâmetros de ingestão da carga da tabela",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "planilha_tollpackbi",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "SetaCondicaoWhere",
									"description": "Seta a variável \"condicao_where\" com o valor do campo \"condicao\" do arquivo de parâmetro. Ou seja, não será necessário realizar a carga completa da tabela.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "VerificarTabelaCargaParcial",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "condicao_where",
										"value": {
											"value": "@activity('VerificarTabelaCargaParcial').output.value[0].condicao",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabelaCargaParcial",
									"description": "Esse passo verifica se será necessário fazer a carga parcial da tabela em processamento. \nVerifica se o nome da tabela atual está no arquivo de parâmetro e se o valor do campo 'cargacompleta' é igual a false.\nCaso positivo (entra na condição True do passo SetarValorCondicao), então deve-se realizar uma carga parcial da tabela seguindo o campo \"condicao\" do arquivo de parâmetros.\nCaso negativo (entra na condição False do passo SetarValorCondicao), então não deverá ser realizado a carga parcial da tabela (posteriormente no passo RealizarIngestao será verificado se a carga será completa ou D-X da tabela).\n\nobs: há três formatos de ingestão de dados: carga total, carga parcial, carga D-X\n-carga completa: todos os registros da tabela serão ingeridos no data lake\n-carga parcial: apenas alguns registros da tabela serão ingeridos no data lake. As condições para a ingestão dos dados estão no campo \"condicao\" do arquivo de parâmetro da base de dados. De forma geral, serão ingeridos dados dos últimos X anos (a depender da base de dados).\n-carga D-X: devem ser ingeridos no data lake apenas os registros dos últimos X dias, ou seja, é a ingestão de dados incrementais.",
									"type": "Filter",
									"dependsOn": [
										{
											"activity": "LerArquivoParametro",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"items": {
											"value": "@activity('LerArquivoParametro').output.value",
											"type": "Expression"
										},
										"condition": {
											"value": "@equals(item().tabela, variables('nome_tabela'))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"atualizacao": {
						"type": "string"
					},
					"dias_atualizacao_p1": {
						"type": "string",
						"defaultValue": "60"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					}
				},
				"folder": {
					"name": "TOLLPACKBI/TUDO"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-10T20:38:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ingest_report_fornecedor')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "prata_report_fornecedor",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-11-02T05:30:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								5
							],
							"monthDays": [
								1,
								2,
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_prata_ingest_juridico')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "prata_report_juridico",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-11-02T05:00:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								5
							],
							"monthDays": [
								1,
								2,
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_FLAT_FILE_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL flat file do KCOR",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "Executar_ingest_e050ecer",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e050ecer_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e050ecer_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e050ecer_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_epst",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_epst_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_epst_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_epst_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_pont",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_pont_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_pont_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_pont_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_e135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e135_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e135_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e135_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_evis",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_evis_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_evis_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_evis_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "Executar_ingest_esul",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_esul_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_esul_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_esul_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_e101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e101_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e101_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e101_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "Executar_ingest_eara",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_eara_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_eara_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_eara_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "Executar_ingest_ermin",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_ermin_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_ermin_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_ermin_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "Executar_ingest_enor",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_enor_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_enor_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_enor_flat_file",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"origem": {
						"type": "string"
					}
				},
				"folder": {
					"name": "KCOR/FLAT_FILE"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T22:41:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_ETL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline para processamento ETL do KCOR paga ingestão incremental dos dados com verificação da pasta bronze ao iniciar a execução da pipeline",
				"activities": [
					{
						"name": "DistribuirPipelines",
						"description": "Switch utilizado para direcionar qual pipeline deve ser processado conforme o valor do campo 'Origem' indicado no parâmetro inicial",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.origem",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "e050_ecer",
									"activities": [
										{
											"name": "Executar_ingest_e050ecer",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e050ecer",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e050ecer",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e050ecer",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "epst",
									"activities": [
										{
											"name": "Executar_ingest_epst",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_epst",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_epst",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_epst",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "pont",
									"activities": [
										{
											"name": "Executar_ingest_pont",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_pont",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_pont",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_pont",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e135",
									"activities": [
										{
											"name": "Executar_ingest_e135",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e135",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e135",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e135",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "evis",
									"activities": [
										{
											"name": "Executar_ingest_evis",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_evis",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_evis",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_evis",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "esul",
									"activities": [
										{
											"name": "Executar_ingest_esul",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_esul",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_esul",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_esul",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "e101",
									"activities": [
										{
											"name": "Executar_ingest_e101",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_e101",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_e101",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_e101",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "eara",
									"activities": [
										{
											"name": "Executar_ingest_eara",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_eara",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_eara",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_eara",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "ermin",
									"activities": [
										{
											"name": "Executar_ingest_ermin",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_ermin",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_ermin",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_ermin",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								},
								{
									"value": "enor",
									"activities": [
										{
											"name": "Executar_ingest_enor",
											"description": "Pipeline para execução do passo 1, carga de dados on-premise para camada bronze",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "ingest_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"cargacompleta": {
														"value": "@pipeline().parameters.cargacompleta",
														"type": "Expression"
													},
													"concessao": {
														"value": "@pipeline().parameters.origem",
														"type": "Expression"
													},
													"dias_atualizacao_p11": {
														"value": "@pipeline().parameters.dias_atualizacao_etl",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Executar_bronze_prata_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_ingest_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "bronze_prata_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "Executar_prata_ouro_enor",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Executar_bronze_prata_enor",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "prata_ouro_kcor_incr_enor",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool",
						"defaultValue": false
					},
					"origem": {
						"type": "string"
					},
					"dias_atualizacao_etl": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T20:55:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E050ECER_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco050 e EcoCerrado para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_E050ECER",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_e050ecer",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_E050ECER_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_E050ECER_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E101_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco101 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E050ECER",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_E101",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_e101",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_E101_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_E101_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_E135_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Eco135 para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_E135",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_E135",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_e135",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_E135_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_E135_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EARA_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EARA",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_EARA",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_eara",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_EARA_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_EARA_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ENOR_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecovias do Araguaia  para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ENOR",
								"type": "DatasetReference",
								"parameters": {
									"schema": "X",
									"table": "X"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_ENOR",
														"type": "DatasetReference",
														"parameters": {
															"schema": "X",
															"table": "X"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_enor",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_ENOR_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_ENOR_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_EPST_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da Ecopistas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_EPST",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_EPST",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_epst",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_EPST_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_EPST_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/KCOR_INCR_P1-1_ERMIN_DIN')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que realiza a ingestão de dados on-premises de todas as tabelas do KCOR da EcoRioMinas para camada bronze",
				"activities": [
					{
						"name": "ListarTabelas",
						"description": "Lista as tabelas contidas na base de dados. Seleciona dinamicante o schema e nome das tabelas, conforme o comando SQL na aba \"Definições\"",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TB2.NAME + '.' + TB1.NAME AS TABLE_NAME\nFROM SYS.TABLES TB1\nINNER JOIN SYS.SCHEMAS TB2\nON TB2.SCHEMA_ID = TB1.SCHEMA_ID\nWHERE TB1.NAME IN ('TabAcidentes'\n\t\t\t\t\t,'TabOcorrencias'\n\t\t\t\t\t,'TabRecursosAcionados'\n\t\t\t\t\t,'TabRecursosCoberturas'\n\t\t\t\t\t,'TabVeiculosEnvolvidos'\n\t\t\t\t\t,'TabVitimas'\n\t\t\t\t\t,'TauxRecursos'\n\t\t\t\t\t,'TabConservacao'\n)\nORDER BY TB1.NAME",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dataset_KCOR_ERMIN",
								"type": "DatasetReference",
								"parameters": {
									"schema": "x",
									"table": "x"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SetarValorInicial",
						"description": "Seta o valor inicial 0 (zero) da variável \"contador\", que contém o número da tabela que está sendo processada",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetarTabelasAux",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "contador",
							"value": "0"
						}
					},
					{
						"name": "IterarTabelas",
						"description": "Realiza a iteração entre as tabelas listadas no passo anterior (ListarTabelas)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetarValorInicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListarTabelas').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SelecionarTabela",
									"description": "Seleciona tabela a ser processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "AtualizarContador",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "nome_tabela",
										"value": {
											"value": "@item().TABLE_NAME",
											"type": "Expression"
										}
									}
								},
								{
									"name": "SetarValorAuxiliar",
									"description": "Verifica o valor da variável \"contador\" e seta como valor da variável \"auxiliar\"",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "aux",
										"value": {
											"value": "@variables('contador')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "AtualizarContador",
									"description": "Adiciona 1 no valor da variável \"contador\" para atualizar o número da tabela que está sendo processada",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "SetarValorAuxiliar",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "contador",
										"value": {
											"value": "@string(add(int(variables('aux')),1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "VerificarTabela",
									"description": "Verifica se a tabela a ser atualizada é uma das tabelas cuja a atualização deve ser feita levando em conta a alteração de chamados anteriores",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "SelecionarTabela",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@contains(variables('tabela_aux'),variables('nome_tabela'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "IngerirTabelaCargaCompleta",
												"description": "Realiza a ingestão da carga de dados, que pode ser completa ou seguindo o valor do campo \"condicao\" do arquivo de parâmetro.\nCaso seja necessário realizar a carga parcial da tabela, no campo \"Query\" da aba \"Source\" é realizada a substituição de $PARAMETRO$ (existente no arquivo de parâmetro \"kcor_[unidade].xlsx\") pelo valor do parâmetro 'dias_atualizacao_p11'). ",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "LerArquivoParametro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat('declare @Data datetime = getdate()\ndeclare @Today datetime = getdate()\n\tSET @Data = DATEADD(dd, DATEDIFF(dd, 0, getdate()), -1)\n\tSET @Today = DATEADD(dd, DATEDIFF(dd, 0, getdate()), 0)\n\tSELECT *\n\t FROM ', variables('nome_tabela'),'\n\t WHERE DataMod >= DataIns and DataMod > @Data and DataMod < @Today')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "dataset_KCOR_ERMIN",
														"type": "DatasetReference",
														"parameters": {
															"schema": "x",
															"table": "x"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "dlPath",
														"type": "DatasetReference",
														"parameters": {
															"caminho": {
																"value": "@concat('camada_bronze/kcor/', pipeline().parameters.Concessao, '/', formatDateTime(utcnow(),'yyyy_MM_dd'))",
																"type": "Expression"
															},
															"arquivo": {
																"value": "@concat(variables('nome_tabela'),'_',formatDateTime(utcnow(),'yyyyMMdd'),'.parquet')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LerArquivoParametro",
												"description": "Lê o arquivo de parâmetro",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "ExcelSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														}
													},
													"dataset": {
														"referenceName": "planilha_kcor_ermin",
														"type": "DatasetReference",
														"parameters": {}
													},
													"firstRowOnly": false
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "KCOR_INCR_P1-1_ERMIN_DIN_AUX",
												"description": "Execução de pipeline auxiliar para processar as tabelas 'TauxRecursos' e 'TabRecursosCoberturas'",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "KCOR_INCR_P1-1_ERMIN_DIN_AUX",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"cargacompleta": {
															"value": "@pipeline().parameters.cargacompleta",
															"type": "Expression"
														},
														"concessao": {
															"value": "@pipeline().parameters.concessao",
															"type": "Expression"
														},
														"dias_atualizacao_p11": {
															"value": "@pipeline().parameters.dias_atualizacao_p11",
															"type": "Expression"
														},
														"nome_tabela": {
															"value": "@item().TABLE_NAME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetarTabelasAux",
						"description": "Set de nomes de tabelas com inserção comum",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ListarTabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "tabela_aux",
							"value": [
								"dbo.TabRecursosCoberturas",
								"dbo.TauxRecursos",
								"dbo.TabConservacao"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cargacompleta": {
						"type": "bool"
					},
					"concessao": {
						"type": "string"
					},
					"dias_atualizacao_p11": {
						"type": "string"
					}
				},
				"variables": {
					"nome_tabela": {
						"type": "String"
					},
					"aux": {
						"type": "String"
					},
					"contador": {
						"type": "String"
					},
					"condicao_where": {
						"type": "String"
					},
					"check": {
						"type": "Boolean"
					},
					"tabela_aux": {
						"type": "Array"
					},
					"pasta_atual": {
						"type": "String"
					}
				},
				"folder": {
					"name": "KCOR/INCREMENTAL/OLD"
				},
				"annotations": [],
				"lastPublishTime": "2023-10-16T17:19:06Z"
			},
			"dependsOn": []
		}
	]
}